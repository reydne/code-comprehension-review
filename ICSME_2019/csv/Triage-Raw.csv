[journal first] does syntax highlighting help programming novices
15 years of program comprehension
a bottomup approach to understand functional programs
a case for concept programs
a case study of program comprehension effort and technical debt estimations
a coding scheme to support systematic analysis of software comprehension
a cognitive approach to program understanding
a cognitive model for program comprehension
a comprehensive model for code readability
a conceptual framework for application comprehension
a contextdriven software comprehension process model
a controlled experiment for program comprehension through trace visualization
a diagnosisbased approach to software comprehension
a documentationrelated approach to objectoriented program understanding
a family of experiments to assess the effectiveness and efficiency of source code obfuscation techniques
a framework profile of .net
a gamification technique for motivating students to learn code readability in software engineering
a guessing measure of program comprehension
a hybrid approach to recognizing programming plans
a little knowledge can go a long way towards program understanding
a metric for software readability
a metrics suite for grammarbased software research articles
a paradigm for programming style research
a postplacement sideeffect removal algorithm
a preliminary investigation of the use of the cloze procedure as a measure of program understanding
a pretty good formatting pipeline
a program normalization to improve flexibility of knowledgebased program understander
a proposal for a measure of program understanding
a replication study on code comprehension and expertise using lightweight biometric sensors
a retrospective view on the role of concepts in program comprehension (mip award)
a schemabased model of program understanding
a search based contextaware approach for understanding and localizing the fault via weighted call graph
A Simpler Model of Software Readability
a static analysis for program understanding and debugging
a study of conceptbased similarity approaches for recommending program examples
a study of transactional memory vs. locks in practice
a study on the impact of emotional quotient on program comprehension
a study on the program comprehension and debugging processes of novice programmers
a survey of the forms of java reference names
a systematic survey of program comprehension through dynamic analysis
a threelayer model of source code comprehension
abstract clustering for program comprehension
"aheadoftime debugging, or programming not in the dark"
aiding program comprehension by static and dynamic feature analysis
an aggregated coupling measure for the analysis of objectoriented software systems
an analysis of the variability in forty preprocessorbased software product lines
an application of fuzzy reasoning to support automated program comprehension
an approach for evaluating and suggesting method names using ngram models
an approach to program understanding by natural language understanding
"an approach to understanding program comprehensibility using spatial complexity, concept assignment and typographical style"
an automatic assistant for program understanding
an automatic interprocedural analysis for the understanding of scientific application programs
an early investigation on the contribution of class and sequence diagrams in source code comprehension
an empiracal study in cobol type inferencing
an empirical comparison of techniques for extracting concept abbreviations from identifiers
an empirical exploration of regularities in opensource software lexicons
An Empirical Investigation into Programming Language Syntax
an empirical investigation into the design of auditory cues to enhance computer program comprehension
an empirical investigation of how and why developers rename identifiers
an empirical investigation of the influence of a type of side effects on program comprehension
an empirical investigation on the readability of manual and generated test cases
an empirical investigation on the relation between analysis models and source code comprehension
an empirical study of identifier splitting techniques
an empirical study of novice program comprehension in the imperative and objectoriented styles
an empirical study of the effect of semantic differences on programmer comprehension
"an empirical study of the impact of two antipatterns, blob and spaghetti code, on program comprehension"
an empirical study on code comprehension data context interaction compared to classical object oriented
an empirical study on program comprehension task classification of novices
an empirical study on program comprehension with reactive programming
an empiricallyderived control structure for the process of program understanding
an experiment in scientific program understanding
an experiment measuring the effects of maintenance tasks on program knowledge
an experimental investigation of the effect of program structure on program understanding
an experimental investigation on the effects of context on source code identifiers splitting and expansion
an exploration of novice programmers comprehension of conditionals in imperative and functional programming
"an exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks"
an exploratory study of identifier renamings
an exploratory study of program comprehension strategies of procedural and objectoriented programmers
an exploratory study on the relationship between changes and refactoring
an eye tracking study on camelcase and under_score identifier styles
an eyetracking methodology for characterizing program comprehension processes
an inception architecturebased model for improving code readability classification
"an initial approach to assessing program comprehensibility using spatial complexity, number of concepts and typographical style"
an introduction to program comprehension for computer science educators
an investigation into professional programmers mental representations of variables
an investigation of misunderstanding code patterns in c opensource software projects
an object finder for program structure understanding in software maintenance
an objective approach to exploring skill differences in strategies of computer program comprehension
an objectiveoriented approach to program comprehension using multiple information sources
analogical representations of programs
analysis of code reading to gain more insight in program comprehension
Analyzer-generated and human-judged predictors of computer program readability
analyzergenerated and humanjudged predictors of computer program readability
analyzing code comments to boost program comprehension
analyzing program readability based on wordnet
analyzing reading pattern of simple c source code consisting of only assignment and arithmetic operations based on data dependency relationship by using eye movement
applicability of program comprehension to sparse matrix computations
applying plan recognition algorithms to program understanding
applying program comprehension techniques to karel robot programs
approaches to clustering for program comprehension and remodularization
approaches to program comprehension
arcc assistant for repetitive code comprehension
archetypal source code searches a survey of software developers and maintainers
architectural reasoning in archjava
architectural repair of open source software
are decomposition slices clones
are test smells really harmful an empirical study
"array resizing for scientific code debugging, maintenance and reuse"
aspects influencing featureoriented software comprehension observations from a focus group
assessment of support for program understanding
attention in software maintenance an eye tracking study
augmenting abstract syntax trees for program understanding
augmenting code with in situ visualizations to aid program understanding
autofolding for source code summarization
automated analysis of scientific and engineering semantics
automated assistance to program understanding
automated objectoriented reusable component identification
automatic derivation of concepts based on the analysis of source code identifiers
automatic identifier inconsistency detection using code dictionary
automatic segmentation of method code into meaningful blocks design and evaluation
automatic segmentation of method code into meaningful blocks to improve readability
automatically assessing code understandability
automatically assessing code understandability how far are we
automatically assessing code understandability reanalyzed combined metrics matter
awareness and comprehension in software/systems engineering practice and education trends and research directions
beacons an initial program comprehension
beacons in computer program comprehension
beacons in program comprehension
beyond gaze preliminary analysis of pupil dilation and blink rates in an fmri study of program comprehension
blaze
blooms taxonomy a framework for assessing programmers knowledge of software systems
bridging program comprehension tools by design navigation
building domain specific dictionaries of verbobject relation from source code
bytecodebased class dependency extraction tool bytecodecdet
can better identifier splitting techniques help feature location
can clone detection support test comprehension
can students reengineer
categorization of concerns a categorical program comprehension model
changesetbased topic modeling of software repositories
checklist inspections and modifications applying blooms taxonomy to categorise developer comprehension
code comprehension activities in undergraduate software engineering course a case study
code comprehension problems as learning events
"code readability testing, an empirical study"
code understanding
codecompass an open software comprehension framework for industrial usage
codersmuse multimodal data exploration of programcomprehension experiments
cognitive processes in program comprehension
cognitive processes in program comprehension an empirical analysis in the context of software reengineering
combined code understanding and comment understanding
commenting source code is it worth it for small programming tasks
comparing generalpurpose and domainspecific languages an empirical study
comparing of feedbackcollection and thinkaloud methods in program comprehension studies
complexity measures for rulebased programs
comprehending aspectoriented programs challenges and open issues
comprehending studies on program comprehension
comprehension and dependency analysis of aspectoriented programs through declarative reasoning
comprehension effort and programming activities related or not related
comprehension of adssupported and paid android applications are they different
comprehension of objectoriented software cohesion the empirical quagmire
comprehension oriented software fault location
comprehension strategies and difficulties in maintaining objectoriented systems an explorative study
compression techniques to simplify the analysis of large execution traces
concepts and methodologies for knowledgebased program understanding the alpuss approach
concise and consistent naming
concise and consistent naming ten years later
"conditional statements, looping constructs, and program comprehension an experiments study"
confounding parameters on program comprehension a literature survey
constructivism and program comprehension strategies
contextaware software documentation
correlating program code to output for supporting program understanding
coss comprehension by ontologising software system
crista a tool to support code comprehension based on visualization and reading technique
criteria for program comprehension derived from software complexity metrics
data flow metrics in program comprehension tasks
Dealing with faults in source code: Abbreviated vs. full-word names
dealing with identifiers and comments in source code comprehension and maintenance results from an ethnographicallyinformed study with students and professionals
delivering comprehension features into source code editors through lsp
delocalized plans and program comprehension
delta extraction an abstraction technique to comprehend why two objects could be related
deploying smart program understanding on a large code base
descriptive compound identifier names improve source code comprehension
design pattern directed clustering for understanding open source code
designing your next empirical study on program comprehension
detecting and comparing brain activity in short program comprehension using eeg
developer reading behavior while summarizing java methods size and context matters
developing application specific ontology for program comprehension by combining domain ontology with code ontology
difference in brain activity by variable and conditional branch in source code
direction and scope of comprehensionrelated activities by procedural and objectoriented programmers an empirical study
discovering comprehension pitfalls in class hierarchies
do background colors improve program comprehension in the #ifdef hell
do class comments aid java program understanding
do code smells impact the effort of different maintenance programming activities
do extracted state machine models help to understand embedded software
Do static type systems improve the maintainability of software systems? An empirical study
do visualizations improve program comprehensibility experiments with control structure diagrams for java
do you remember this source code
documenting designpattern instances a family of experiments on sourcecode comprehensibility
does the discipline of preprocessor annotations matter a controlled experiment
does the documentation of design pattern instances impact on source code comprehension results from two controlled experiments
dynamic program slicing in understanding of program execution
easing program comprehension by sharing navigation data
effect of modularization and comments on program comprehension.
effective identifier names for comprehension and memory
effectiveness of flowcharting as a scaffolding tool to learn python
effects of decomposition techniques on knowledgebased program understanding
effects of variable names on comprehension an empirical study
effort estimation for program comprehension
empirical analysis of faultproneness in methods by focusing on their comment lines
empirical studies on programming language stimuli
enhancing objectoriented programming comprehension using optimized sequence diagram
enhancing program comprehension formatting and documenting
enriching program comprehension for software reuse
evaluating software clustering algorithms in the context of program comprehension
"expectationbased, inferencebased, and bottomup software comprehension research articles"
experience from measuring program comprehension. toward a general framework
experiences in program understanding
expert problem solving strategies for program comprehension
exploiting type hints in method argument names to improve lightweight type inference
exploratory study of program comprehension strategies of procedural and objectoriented programmers
exploring software measures to assess program comprehension
exploring the influence of identifier names on code quality an empirical study
expressiveness and effectiveness of program comprehension thoughts on future research directions
extracting meaning from abbreviated identifiers
eye movements in code reading relaxing the linear order
eye tracking and program comprehension
facilitating program comprehension by mining association rules from source code
facilitating program comprehension via generic components for state machines
facilitating scenariobased program comprehension with topic models
facilitating the comprehension of c programs an experimental study
factors impacting novice code comprehension in a tutor for introductory computer science
feature maps a comprehensible software representation for design pattern detection
fepss a flexible and extensible program comprehension support system
focal structures and information types in prolog
folding an approach to enable program understanding of preprocessed languages
foundation for program understanding
framing program comprehension as fault localization
from code comprehension model to tool capabilities
from obfuscation to comprehension
from program comprehension to tool requirements for an industrial environment
from source code identifiers to natural language terms
from system comprehension to program comprehension
fundamental nanopatterns to characterize and classify java methods
giving meaning to macros
have we already totally understood program comprehension [haben wir programmverstehen schon ganz verstanden]
highmcc functions in the linux kernel
how do professional developers comprehend software
how effective developers investigate source code an exploratory study
how novices read source code in introductory courses on programming an eyetracking experiment
how programmers read regular code a controlled experiment using eye tracking
how to compare program comprehension in fosd empirically an experience report
identification of idiom usage in c++ generic libraries
identifier length and limited programmer memory
identifying class name inconsistency in hierarchy a first simple heuristic
identifying comprehension bottlenecks using program slicing and cognitive complexity metrics
identifying core objects for trace summarization using reference relations and access analysis
identifying knowledge divergence by vocabulary monitoring in software projects
identifying word relations in software a comparative study of semantic similarity tools
ifl an interactive environment for understanding feature implementations
impact of limited memory resources
impacts of coding practices on readability
implementation of conceiver++ an objectoriented program understanding system
improved cognitive information complexity measure a metric that establishes program comprehension effort
improving code readability classification using convolutional neural networks
improving code readability models with textual features
improving comprehensibility of source code via traceability information a controlled experiment
improving computer program readability to aid modification
improving knowledgebased program understanding by introducing separated information analysis and uncertainty reasoning techniques
improving program comprehension by automatic metamodel abstraction
improving program comprehension by combining code understanding with comment understanding
improving program comprehension by enhancing program constructs an analysis of the umple language
improving readability of iconic programs with multiple view object representation
improving source code lexicon via traceability and information retrieval
improving source code quality through the definition of linguistic antipatterns
improving source code readability theory and practice
improving the tokenisation of identifier names
incremental exploratory visualization of relationships in large codebases for program comprehension
indentation simply a matter of style or support for program comprehension
individual differences in program comprehension strategies in unfamiliar programming systems
industrial program comprehension challenge 2011 archeology and anthropology of embedded control systems
inferencebased and expectationbased processing in program comprehension
inferring hierarchical motifs from execution traces
inferring semantically related words from software context
influence of domainspecific notation to program understanding
infosound an audio aid to program comprehension
integrative levels of program comprehension
intensions are a key to program comprehension
inventive tool use to comprehend big code
is there any difference in novice comprehension of a small program written in the eventdriven and objectoriented styles
knowledge transfer from research to industry a survey on program comprehension
knowledgebased approach to the analysis of code and program design language (pdl)
layered explanations of software a methodology for program comprehension
learning a metric for code readability
linguistic antipatterns what they are and how developers perceive them
linguistic driven refactoring of source code identifiers
"linking code readability, structure, and comprehension among novices its complicated"
locating the meaning of terms in source code research on term introduction
lost comments support program comprehension
"maintaining program understanding issues, tools, and future directions"
maximizing functional cohesion of comprehension environments by integrating user and task knowledge
meaningful identifier names the case of singleletter variables
meaningfulness as a factor of program complexity
measurement of source code readability using word concreteness and memory retention of variable names
measuring computer program comprehension
measuring difficulty of program comprehension based on brain activation
measuring neural efficiency of program comprehension
measuring program comprehension a largescale field study with professionals
measuring program understanding
measuring the cognitive load of software developers a systematic mapping study
measuring the difficulty of code comprehension tasks using software metrics
measuring the extent of source code readability using regression analysis
measuring the impact of lexical and structural inconsistencies on developers’ cognitive load during bug localization
mediating diverse visualisations for comprehension
mental representations of programs by novices and experts
metrics to identify where objectoriented program comprehension benefits from the runtime structure
mining java class naming conventions
mining the lexicon used by programmers during sofware evolution
"mining the mind, minding the mine grand challenges in comprehension and mining"
moral dominance relations for program comprehension
moving towards objective measures of program comprehension
multilingual source code analysis a systematic literature review
navigation and comprehension of programs by novice programmers
nomen est omen analyzing the language of function identifiers
normalizing objectoriented class styles in javascript
normalizing source code vocabulary
normalizing source code vocabulary to support program comprehension and software quality
novice comprehension of objectoriented oo programs an empirical study
novice comprehension of small programs written in the procedural and objectoriented styles
novice difficulties in selection structure
novice programmers reasoning about reversing conditional statements
"objectoriented program comprehension effect of expertise, task and phase"
on expanding abbreviated identifiers in the source code
on measuring the difficulty of program comprehension based on cerebral blood flow
on method ordering
on some enduser programming constructs and their understandability
on the effect of code regularity on comprehension
on the knowledge required to understand a program
on the role of hypotheses during opportunistic understanding while porting large scale code
on the use of domain terms in source code
overcoming language dichotomies toward effective program comprehension for mobile app development
overview of program comprehension
partofspeech tagging of program identifiers for improved textbased software engineering tools
patterns of syntax theme customization for code editors
planbased representations of pascal and fortran code
polymorphism in the spotlight studying its prevalence in java and smalltalk
presenting microtheories of program comprehension in pattern form
prevalence of confusing code in software projects atoms of confusion in the wild
process aspects and social dynamics of contemporary code review insights from open source development and industrial practice at microsoft
professional status and expertise for uml class diagram comprehension an empirical study
program comprehension and implications of human navigational approaches
program comprehension as fact finding
program comprehension beyond the line
program comprehension during software maintenance and evolution
program comprehension for domainspecific languages
program comprehension for web services
program comprehension identifying learning trajectories for novice programmers
program comprehension in generative programming a history of grand challenges
program comprehension in multilanguage systems
program comprehension in preprocessorbased software
program comprehension investigating the effects of naming style and documentation
program comprehension of domainspecific and generalpurpose languages comparison using a family of experiments
program comprehension of domainspecific and generalpurpose languages replication of a family of experiments using integrated development environments
"program comprehension past, present, and future"
program comprehension techniques improve software inspections a case study
program comprehension through software habitability
program comprehension through the identification of abstract data types
program factors as predictors of program readability
program indentation and comprehensibility
program readability procedures versus comments
"program readability, closing keywords and prefixstyle intermediate keywords"
program slicing in understanding of large programs
program understanding as an expectationdriven activity
program understanding behaviour during enhancement of largescale software
program understanding by reduction sets
program understanding models an historical overview and a classification
program understanding support environment
program understanding using ontologies and dynamic analysis
program understandingdoes it offer hope for aging software
programming from the readers perspective toward an expectations approach
programming schemes in program understanding and maintenance an introduction
programming style changes in evolving source code
programming with small blocks
programs are knowledge bases
pui a tool to support program understanding
pump a program understanding tool for modsim programs
quantifying program comprehension with interaction data
quantifying programmers mental workload during program comprehension based on cerebral blood flow measurement a controlled experiment
quantifying the closeness between program components and features
reading beside the lines indentation as a proxy for complexity metric
reading logic as code or as natural language text a randomized controlled trial experiment on the comprehensibility of objectoriented source code in comparison to natural language text
recognition in a program understanding system
recursion removal/introduction by formal transformation an aid to program development and program comprehension
Recursion vs. iteration: An empirical study of comprehension
reducing maintenance effort through software operation knowledge an eclectic empirical evaluation
reducing program comprehension effort in evolving software by recognizing feature implementation convergence
refining existing theories of program comprehension during maintenance for concurrent software
relating identifier naming flaws and code quality an empirical study
renaming parts of identifiers consistently within code clones
reordering program statements for improving readability
reordering results of keywordbased code search for supporting simultaneous code changes
repent analyzing the nature of identifier renamings
replicating novices struggles with coding style
requirements for an elucidative programming environment
role for chunking and fuzzy reasoning in a program comprehension and debugging tool
semantic metrics metrics based on semantic aspects of software
semantic reasoning in young programmers
semantic zooming of code change history
semanticbased extraction approach for generating source code summary towards program comprehension
shorter identifier names take longer to comprehend
simplicity a key engineering concept for program understanding
simultaneous measurement of program comprehension with fmri and eye tracking a case study
slicing and replaying code change history
smells are sensitive to developers! on the efficiency of (un)guided customized detection
software comprehension through concernbased queries
software entities as bird flocks and fish schools
software evolution comprehension replay to the rescue
sonification design guidelines to enhance program comprehension
source code comprehension analysis in software maintenance
source code comprehension strategies and metrics to predict comprehension effort in software maintenance and evolution tasks an empirical study with industry practitioners
sourcecode comprehension tasks supported by uml design models results from a controlled experiment and a differentiated replication
spotting familiar code snippet structures for program comprehension
static analysis for program understanding and debugging
structural knowledge and language notational properties in program comprehension
studying onboarding to improve program comprehension tool support
studying the effect of umlbased models on sourcecode comprehensibility results from a longterm investigation
supporting developers with natural language queries
supporting program comprehension for refactoring operations with annotations
supporting program comprehension in large preprocessorbased software product lines
supporting program comprehension using dominance trees
symbolic reductionist model for program comprehension
synchronized analysis of eye movement and eeg during program comprehension
syntactic approximation using iterative lexical analysis
"syntax, predicates, idioms what really affects code complexity"
tackling knowledge needs during software evolution
tasks that can improve novices program comprehension
tassal autofolding for source code summarization
the adherence of open source java programmers to standard coding practices
the ames approach to application understanding a case study
the codecompass comprehension framework
the codesurfer software understanding platform
the conceptual calculus for automatic program understanding
the discipline of preprocessorbased annotations does #ifdef tag nt #endif matter
the effect of identifier naming on source code readability and quality
the effect of modularization and comments on program comprehension
the effect of objectoriented programming expertise in several dimensions of comprehension strategies
the effect of poor source code lexicon and readability on developers cognitive load
the effect of scope delimiters on program comprehension
the effectiveness of control structure diagrams in source code comprehension activities
the effectiveness of source code obfuscation an experimental assessment
the effects of naming style and expertise on program comprehension
the impact of identifier style on effort and comprehension
the impact of tools supported in integrateddevelopment environments on program comprehension
the impacts of function extraction technology on program comprehension a controlled experiment
the influence of color on program readability and comprehensibility
the influence of different aoi models in source code comprehension analysis
the initial stage of program comprehension
the interleaving problem in program understanding
the relevance of application domain knowledge characterizing the computer program comprehension process
the relevance of application domain knowledge the case of computer program comprehension
the role of concepts in program comprehension
the role of extrafoveal vision in source code comprehension
the scent of a smell an extensive comparison between textual and structural smells
the use of domain knowledge in program understanding
the use of reading technique and visualization for program understanding
theories and techniques of program understanding
"theories, methods and tools in program comprehension past, present and future"
"theories, tools and research methods in program comprehension past, present and future"
theory and practice of middleout programming to support program understanding
theseus understanding asynchronous code
through a mirror darkly how programmers understand legacy code
to camelcase or underscore
toward a constraintsatisfaction frameworkfor evaluating programunderstanding algorithms
toward conjoint analysis of simultaneous eyetracking and fmri data for programcomprehension studies
toward interactionbased evaluation of visualization approaches to comprehending program behavior
toward measuring program comprehension with functional magnetic resonance imaging
toward program representation and program understanding using process algebras
towards a framework for program understanding
towards a taxonomy of programmingrelated difficulties during maintenance
towards a uniform code annotation approach with configurable annotation granularity
towards an integrated toolset for program understanding
towards spatial complexity measures for comprehension of java programs
towards standard for experiments in program comprehension
towards trace based model synthesis for program understanding and test automation
towards understanding programs by counting objects
tracing of state machine execution in the modeldriven development framework
transaction mapping based approach for mining software specifications
two quasiexperiments on cohesion metrics and program comprehension
typographic style is more than cosmetic
understanding collaborative program comprehension interlacing gaze and dialogues
understanding concerns in software insights gained from two case studies
understanding largescale software – a hierarchical view
understanding log lines using development knowledge
understanding lolita program comprehension in functional languages
understanding misunderstandings in source code
understanding obfuscated code
understanding objectoriented source code from the behavioural perspective
understanding program understanding
understanding programmer language
understanding programming expertise an empirical study of phasic brain wave changes
understanding software through numbers a metric based approach to program comprehension
understanding source code differences by separating refactoring effects
understanding source code through projectional editor
understanding the architecture of software systems
understanding the dynamics of information systems
understanding understanding source code with functional magnetic resonance imaging
unifying theories of program comprehension
use of a program understanding taxonomy at hewlettpackard
using an artificial intelligence approach to build an automated program understanding/fault localization tool
using an integrated toolset for program understanding
using background colors to support program comprehension in software product lines
using dataflow information for concern identification in objectoriented software systems
using developer eye movements to externalize the mental model used in code summarization tasks
using eye tracking technology to analyze the impact of stylistic inconsistency on code readability
variable provenance in software systems
view definitions for languageindependent multipleview program comprehension and editing
visual depiction of decision statements what is best for programmers and nonprogrammers
visualization techniques for effective software comprehend
visualizing code bad smells
visualizing software structure understandability
visually analyzing eye movements on natural language texts and source code snippets
vpls and novice program comprehension how do different languages compare
what influences dwell time during source code reading analysis of element type and frequency as factors
what is my program doing program dynamics in programmers terms
whats in a name a study of identifiers
which programming language should students learn first a comparison of java and python
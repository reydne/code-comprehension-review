10th international workshop on program comprehension
14th ieee international conference on program comprehension copyright
14th ieee international conference on program comprehension cover
14th ieee international conference on program comprehension table of contents
14th ieee international conference on program comprehension title page
15 years of program comprehension
15th ieee international conference on program comprehension copyright
15th ieee international conference on program comprehension cover
15th ieee international conference on program comprehension table of contents
15th ieee international conference on program comprehension title
16th ieee international conference on program comprehension [cover art]
18th ieee international conference on program comprehension [cover art]
3d visualization for software development
3d visualization techniques to support slicingbased program comprehension
4th workshop on graphical documentation uml style guidelines
[journal first] a comparison of program comprehension strategies by blind and sighted programmers
[journal first] does syntax highlighting help programming novices
a 3d metaphor for software production visualization
a bottomup approach for visualizing program behavior
a bottomup approach to understand functional programs
a brief summary of cognitive patterns for program comprehension
a business process explorer
a business process explorer recovering and visualizing ecommerce business processes
a case for concept programs
a case study in evaluating the usefulness of the runtime structure during coding tasks
a case study of applying an eclectic approach to identify objects in code
a case study of domainbased program understanding
a case study of program comprehension effort and technical debt estimations
a casebased reasoning method for processing model recognition and reuse in program comprehension
a categorization of classes based on the visualization of their internal structure the class blueprint
a clichebased environment to support architectural reverse engineering
a code obfuscation framework using code clones
a coding scheme to support systematic analysis of software comprehension
a cognitive approach to program understanding
a cognitive model for program comprehension
a cognitive model for software architecture complexity
a collaborative demonstration of reverse engineering tools
a comment analysis approach for program comprehension
a commenting system to improve program readability
a comparative study of three program exploration tools
a comparison of different types of learning activities in a mobile python tutor
a comparison of graphs of concept for reverse engineering
a comparison of program comprehension strategies by blind and sighted programmers
a comparison of program readability of c++ and c
a comparison of three algorithms for computing truck factors
a comprehensive model for code readability
a conceptual framework for application comprehension
a concern visualization approach for improving matlab and octave program comprehension
a contextaware analysis scheme for blooms taxonomy
a contextdriven software comprehension process model
a contribution to program comprehension by program analysis application to numerical programs
a controlled experiment for program comprehension through trace visualization
a controlled experiment in assessing and estimating software maintenance tasks
a controlled experiment template for evaluating the understandability of model transformation languages
a cooperative program understanding environment
a cots component comprehension process
a data set of program invariants and error paths
a debugging scheme for declarative equation based modeling languages
a decision tree approach for design patterns detection by subgraph isomorphism
a demanddriven approach to slicing legacy cobol systems
a diagnosisbased approach to software comprehension
a doc2vecbased assessment of comments and its application to changeprone method analysis
a documentation suite for maintenance programmers
a documentationrelated approach to objectoriented program understanding
a dynamic analysis for revealing object ownership and sharing
a dynamic analysis technique to extract symptoms that suggest side effects in framework applications
a dynamic graphbased visualization for spreadsheets
a family of experiments to assess the effectiveness and efficiency of source code obfuscation techniques
a feasibility study on using clustering algorithms in programming education research
a feature model of framework applications
a finite representation of the narrowing space
a flexible method for segmentation in concept assignment
a formal architectural design patternsbased approach to software understanding
a formal evaluation of depdegree based on weyukers properties
a formal framework for incremental model slicing
a formalism to automate mapping from program features to code
a formative evaluation of information retrieval techniques applied to software catalogues
a framework for debugging java programs in a bytecode
a framework for estimating interest on technical debt by monitoring developer activity related to code comprehension
a framework for examining topical locality in objectoriented software
a framework for experimental evaluation of clustering techniques
a framework for source code search using program patterns
a framework for the evaluation of specification miners based on finite state machines
a framework for understanding conceptual changes in evolving source code
a framework profile of .net
a gamification technique for motivating students to learn code readability in software engineering
a generalized knowledgebased approach to comprehend pascal and c programs
a generic architecture for data flow analysis to support reverse engineering
a graphicsbased system that supports the program understanding process
a guessing measure of program comprehension
a history querying tool and its application to detect multiversion refactorings
a hybrid approach for program understanding based on graph parsing and expectationdriven analysis
a hybrid approach to recognizing programming plans
a hybrid program knowledge base for static program analyzers
a hybrid program model for objectoriented reverse engineering
a hybrid query engine for the structural analysis of java and aspectj programs
a knowledge based method for data flow analysis
a knowledgebased approach to objectoriented legacy code reuse
a knowledgebased approach to the analysis of loops
a knowledgebased toolkit for software visualisation
a largescale empirical study on codecomment inconsistencies
a lightweight approach to software validation by comparing uml use cases with internal program documentation selected via call graphs
a lightweight approach to uncover technical artifacts in unstructured data
a lightweight visualization of interprocedural dataflow paths for source code reading
a little knowledge can go a long way towards program understanding
a look into programmers heads
a map of the heap revealing design abstractions in runtime structures
a method for analyzing loop programs
a method for the formal testing of program visualization tools
a method of program structure division base on program understanding
a method of program structure division based on program understanding
a method of use case oriented semiautomatic reverse engineering
a method to reorganize legacy systems via concept analysis
a metric for software readability
a metric model for aspects coupling
a metricbased heuristic framework to detect objectoriented design flaws
a metrics suite for grammarbased software
a metrics suite for grammarbased software research articles
a model for structuring user documentation of objectoriented frameworks using patterns and hypertext
a model for understanding software components
a model proposal for program comprehension
a multiparadigm modelling approach to live modelling
a multiperspective software visualization environment
a multiple view interactive environment to support matlab and gnu/octave program comprehension
a neurocognitive perspective of program comprehension
a new software maintenance scenario based on refactoring techniques
a new standard of choosing slicing criterion
a nonconservative approach to software pattern detection
a note on extensible software systems in light of maintenance efforts
a novel approach based on gestalt psychology for abstracting the content of large execution traces for program comprehension
a p2p architecture for supporting group communication in cscw systems
a pagerank based recommender system for identifying key classes in software systems
a paradigm for programming style research
a pattern matching framework for software architecture recovery and restructuring
a postplacement sideeffect removal algorithm
a preliminary investigation of the use of the cloze procedure as a measure of program understanding
a preliminary study on using code smells to improve bug localization
a pretty good formatting pipeline
a program beacon recognition tool
a program normalization to improve flexibility of knowledgebased program understander
a program understanding environment based on the &ldquo;star&rdquo; approach to tool integration
a program understanding support environment
a program visualization tool for program comprehension
a proposal for a measure of program understanding
a prototype system for static and dynamic program understanding
a qualitative assessment of the efficacy of uml diagrams as a form of graphical documentation in aiding program understanding
a qualitative assessment of the reverse engineering capabilities of unit testing tools for understanding java programs
a qualitative comparison of three aspect mining techniques
a qualitative humancentric evaluation of flexibility in middleware implementations
a qualitative investigation of landmarks in software code navigation
a quantitative analysis of developer information needs in software ecosystems
a query algebra for program databases
a replication study on code comprehension and expertise using lightweight biometric sensors
a retrospective view on the role of concepts in program comprehension (mip award)
a reverse‐engineering approach to subsystem structure identification
a review of source code projections in integrated development environments
a role for chunking and fuzzy reasoning in a program comprehension and debugging tool
a role of a user in the development and maintenance of an information system empirical and theoretical findings
a scalable technique for characterizing the usage of temporaries in frameworkintensive java applications
a schemabased model of program understanding
a search based context aware approach for understanding and localizing the fault via weighted call graph
a search based contextaware approach for understanding and localizing the fault via weighted call graph
a searchbased approach for accurate identification of log message formats
a semantic entropy metric
a semanticsbased approach to concept assignment in assembly code
a semiautomated method for classifying program analysis rules into a quality model
a simple and effective measure for complex lowlevel dependencies
a simple static model for understanding the dynamic behavior of programs
a small social history of software architecture
a software behaviour analysis framework based on the human perception systems (nier track)
a software behaviour analysis framework based on the human perception systems nier track
a software evaluation model using component association views
a software maintenance process model with featurebased tool and reliability metrics
a software reengineering method using domain models
a space of layout styles for hierarchical graph models of software systems
a static analysis for program understanding and debugging
a static code search technique to identify dead fields by analyzing usage of setup fields and field dependency in test code
a static model for recovering higher level views of threads and their interactions
a static model for reverse engineering of software threads and their interactions
a step toward quality control in computer programming understanding the psychology of the management of computer programmers
a strategy for detecting and clustering functionalities in objectoriented systems
a structured demonstration of five program comprehension tools lessons learnt
a structured demonstration of program comprehension tools
a study &amp; review on code obfuscation
"a study of comment abstract ion, coupling, and placement"
"a study of comment abstraction, coupling, and placement"
a study of conceptbased similarity approaches for recommending program examples
a study of enduser programming for geographic information systems
a study of student strategies for the corrective maintenance of concurrent software
a study of the documentation essential to software maintenance
a study of the relationship between class testability and runtime properties
a study of transactional memory vs. locks in practice
a study on assisting in prolog program comprehension by using stepwise execution and stepwise comparison
a study on the impact of emotional quotient on program comprehension
a study on the program comprehension and debugging processes of novice programmers
a suite of tools for facilitating reverse engineering using formal methods
a support system for understanding list processing programs which generates explanations and input‐output examples
a survey and evaluation of tool features for understanding reverseengineered sequence diagrams
a survey of external representations employed in objectoriented programming environments
a survey of the forms of java reference names
a synergistic approach to program comprehension
a synthesis of logical and probabilistic reasoning for program understanding and debugging
a system for visualizing binary componentbased program structure with component functional size
a systematic analysis of software architecture visualization techniques
a systematic survey of program comprehension through dynamic analysis
a taxonomy for program metamodels in program reverse engineering
a taxonomy of interactions introduced by aspects
a technique for justintime clone detection in large scale systems
a templateoriented approach for simulation program understanding
a testbed for visualizing sensornet behavior
a theory based tool set for analysing reading processes in the context of learning programming
a theory of applied mind of programming understanding the challenges in learning to program
a threelayer model of source code comprehension
a tool for understanding multilanguage program dependencies
a tool for visual understanding of source code dependencies
a toolkit for visualizing the runtime behavior of tinyos applications
a toolset for program understanding
a traceability technique for specifications
a trajectorybased strict semantics for program slicing
a tree kernel based approach for clone detection
a twofolded impact analysis of schema changes on database applications
a unified approach to featurecentric analysis of objectoriented software
a unified interprocedural program representation for a maintenance environment
a usability analysis of blocksbased programming editors using cognitive dimensions
a usecase driven method of architecture recovery for program understanding and reuse reengineering
a user interface for an environment to support program understanding
a validated set of smells in modelviewcontroller architectures
a visual framework for the definition and execution of reverse engineering processes
a visualization framework for parallelization
a visualization tool for 3d graphics program comprehension and debugging
a visualization tool for constraint program debugging
a visualization tool for data structures course
a visualization tool recording historical data of program comprehension tasks
a workbench for program comprehension during software maintenance
abridging source code
abstract clustering for program comprehension
abstracting and narrating novice programs using regular expressions
abstracting planlike program information a demonstration
abstracting runtime heaps for program understanding
abstracting the template instantiation relation in c++
abstraction of multiple executions of objectoriented programs
academic software development tools and techniques report on the 1st workshop wasdett at ecoop 2008
access permission contracts for scripting languages
achieving a reuse perspective within a component recovery process an industrial scale case study
active files as a measure of software maintainability
active semisupervised defect categorization
active text for structuring and understanding source code
activities performed by programmers while using framework examples as a guide
adaptive problem selection in a mobile python tutor
adding controlflow to a visual dataflow representation
adding process metrics to enhance modification complexity prediction
additional reviewers
addressing misconceptions about code with alwayson programming visualizations
adoption of reverse engineering tools a cognitive perspective and methodology
advancing scientific computation by improving scientific code development symbolic execution and semantic analysis
adventures in nicad a tenyear retrospective
advise weaving in énfasis
agile parsing in txl
"aheadoftime debugging, or programming not in the dark"
aiding comprehension of unit test cases and test suites with stereotypebased tagging
aiding program comprehension by static and dynamic feature analysis
aiding software maintenance with copyandpaste cloneawareness
alborz a querybased tool for software architecture recovery
alborz an interactive toolkit to extract static and dynamic views of a software system
algorithm for control dependence subgraph construction
algorithm recognition based on demanddriven dataflow analysis
algorithm recognition for programming tutoring based on flow graph parsing
algorithmic concept recognition support for automatic parallelization a case study on loop optimization and parallelization
algorithmic concept recognition support for skeleton based parallel programming
algorithmic concept recognition to support high performance code reengineering
alias annotations for program understanding
alma versus ddd
alternatives to the knowledge discovery metamodel an investigation
"amalgamating source code authors, maintainers, and change proneness to triage change requests"
amap automatically mining abbreviation expansions in programs to enhance software maintenance tools
ames approach to application understanding a case study
amorphous program slicing
"an (architecturecentric) approach for tracing, organizing, and understanding events in eventbased software architectures"
an aggregated coupling measure for the analysis of objectoriented software systems
an algebraic notation for representing threads in object oriented software comprehension
an algebraic query method for static program analysis and measurement
an algorithm for computing loop functions
an algorithm of program comprehension and visual representation for objectoriented program
an analysis framework for understanding layered software architectures
an analysis of goal orientation pattern and selfefficacy for explanation of programming plans
an analysis of machine learning algorithms for condensing reverse engineered class diagrams
an analysis of some commercial pl/i programs
an analysis of the variability in forty preprocessorbased software product lines
an android security case study with bauhaus
an application of fuzzy reasoning to support automated program comprehension
an application of latent dirichlet allocation to analyzing software evolution
an approach for detecting execution phases of a system for the purpose of program comprehension
an approach for evaluating and suggesting method names using ngram models
an approach for extracting workflows from ecommerce applications
an approach for mapping features to code based on static and dynamic analysis
an approach of concurrent objectoriented program slicing based on ltl property
an approach to animation of software specifications
an approach to highlevel behavioral program documentation allowing lightweight verification
an approach to limit the wynot problem
an approach to predict software maintenance cost based on ripple complexity
an approach to program understanding by natural language understanding
"an approach to understanding program comprehensibility using spatial complexity, concept assignment and typographical style"
an architectural connectivity metric and its support for incremental rearchitecting of large legacy systems
an architecture for automated software maintenance
an architecture for interoperable program understanding tools
an architecture to support model driven software visualization
an assessment methodology for trace reduction techniques
an automated approach for abstracting execution logs to execution events
an automated approach for noise identification to assist software architecture recovery techniques
an automated procedure for identifying poorly documented object oriented software components
an automatic assistant for program understanding
an automatic interprocedural analysis for the understanding of scientific application programs
an early investigation on the contribution of class and sequence diagrams in source code comprehension
an eclipse based environment to define and execute processes with application to the reverse engineering
an eclipse plugin for model checking
an eclipse plugin for the automated reverseengineering of software programs
an effectiveness measure for software clustering algorithms
an efficient algorithm for computing mhp information for concurrent java programs
an efficient approach to mine high utility path patterns from software executing traces
an empiracal study in cobol type inferencing
an empirical analysis of c preprocessor use
an empirical analysis of the distribution of unit test smells and their impact on software maintenance
an empirical comparison of static and dynamic type systems on api usage in the presence of an ide java vs. groovy with eclipse
an empirical comparison of techniques for extracting concept abbreviations from identifiers
an empirical comparison of textual and graphical data structure documentation for cobol programs
an empirical evaluation of highlevel synthesis languages and tools for database acceleration
an empirical exploration of regularities in opensource software lexicons
an empirical investigation into the design of auditory cues to enhance computer program comprehension
an empirical investigation of how and why developers rename identifiers
an empirical investigation of the influence of a type of side effects on program comprehension
an empirical investigation on the readability of manual and generated test cases
an empirical investigation on the relation between analysis models and source code comprehension
an empirical study of amorphous slicing as a program comprehension support tool
an empirical study of blindness and program comprehension
an empirical study of identifier splitting techniques
an empirical study of novice program comprehension in the imperative and objectoriented styles
an empirical study of static call graph extractors
an empirical study of the effect of semantic differences on programmer comprehension
"an empirical study of the impact of two antipatterns, blob and spaghetti code, on program comprehension"
an empirical study of the impacts of clones in software maintenance
an empirical study of the relationship between the concepts expressed in source code and dependence
an empirical study of the use of friends in c++ software
an empirical study on code comprehension data context interaction compared to classical object oriented
an empirical study on keywordbased web site clustering
an empirical study on practicality of specification mining algorithms on a realworld application
an empirical study on program comprehension task classification of novices
an empirical study on program comprehension with reactive programming
an empirical study on the impact of c++ lambdas and programmer experience
an empirical study on the importance of source code entities for requirements traceability
an empirical study on the usage of sql execution traces for program comprehension
an empirical study on using stereotypes to improve understanding of uml models
an empirical validation of complexity profile graph
an empiricallyderived control structure for the process of program understanding
an evolution analysis method based on fuzzy concept lattice and source code analysis
an experiment in scientific program understanding
an experiment measuring the effects of maintenance tasks on program knowledge
an experiment on the role of graphical elements in architecture visualization
an experimental investigation of the close procedure as a measure of program understanding
an experimental investigation of the effect of program structure on program understanding
an experimental investigation on the effects of context on source code identifiers splitting and expansion
an exploration of novice programmers comprehension of conditionals in imperative and functional programming
an exploratory case study of the maintenance effectiveness of traceability models
an exploratory study of code and document interactions during taskdirected program comprehension
an exploratory study of factors influencing change entropy
"an exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks"
an exploratory study of identifier renamings
an exploratory study of program comprehension strategies of procedural and objectoriented programmers
an exploratory study of the evolution of communicated information about the execution of large software systems
an exploratory study on the relationship between changes and refactoring
an extensible framework for variableprecision dataflow analyses in mps
an eye tracking study on camelcase and under_score identifier styles
an eye tracking study on camelcase and underscore identifier styles
an eyetracking methodology for characterizing program comprehension processes
an eyetracking study of java programmers and application to source code summarization
an implementation methodology for supervisory control theory
an improved algorithm for identifying objects in code
an improved methodology on information distillation by mining program source code
an inception architecturebased model for improving code readability classification
an information retrieval process to aid in the analysis of code clones
an information visualization feature model for supporting the selection of software visualizations
"an initial approach to assessing program comprehensibility using spatial complexity, number of concepts and typographical style"
an integrated approach for studying architectural evolution
an interactive microarray callgraph visualization
an interactive tool for program manipulation
an interactive visualization for message sequence charts
an interprocedural aspect control flow graph to support the maintenance of aspect oriented systems
an intervention strategy to hone students code understanding skills
an introduction to program comprehension for computer science educators
an intuitive visualization for rapid data analysis using the dna metaphor for eye movement patterns
an investigation into professional programmers mental representations of variables
an investigation of clustering algorithms in the identification of similar web pages
an investigation of java abstraction usage for program modifications
an investigation of misunderstanding code patterns in c opensource software projects
an object finder for program structure understanding in software maintenance
an objective approach to exploring skill differences in strategies of computer program comprehension
an objectiveoriented approach to program comprehension using multiple information sources
an observational investigation of reverse engineers process and mental models
an observational investigation of reverse engineers processes and mental models
an ontology toolkit for problem domain concept location in program comprehension
an open visualization toolkit for reverse architecting
an optimal algorithm for mojo distance
an unsupervised learning based conceptual coupling measure
an xml c source code interchange format for case tools
an xmlbased lightweight c++ fact extractor
analogical representations of programs
analysing fortran codes for program understanding and reengineering
analysis and visualization of predicate dependence on formal parameters and global variables
analysis of code reading to gain more insight in program comprehension
analysis of entities in c and c++ programs and relations between them for program understanding
analysis of metaprograms an example
analysis of test log information through interactive visualizations
analyzergenerated and humanjudged predictors of computer program readability
analyzing and understanding architectural characteristics of com+ components
analyzing and visualizing information flow in heterogeneous componentbased software systems
analyzing apis documentation and code to detect directive defects
analyzing code comments to boost program comprehension
analyzing feature implementation by visual exploration of architecturallyembedded callgraphs
analyzing performanceaware code changes in software development process
analyzing program dependencies in java ee applications
analyzing program readability based on wordnet
analyzing reading pattern of simple c source code consisting of only assignment and arithmetic operations based on data dependency relationship by using eye movement
analyzing the scalability of managed language applications with speedup stacks
analyzing the structure of java software systems by weighted kcore decomposition
analyzing user comments on youtube coding tutorial videos
android app protection via interpretation obfuscation
android repository mining for detecting publicly accessible functions missing permission checks
anomaly detection by monitoring filesystem activities
answering common questions about code
answering control flow questions about code
answering program understanding questions on demand with taskspecific runtime information
antipattern detection with model queries a comparison of approaches
applicability of program comprehension to sparse matrix computations
application of formal methods to the development of a software maintenance tool
application of puzzles to unpuzzle the programming difficulty through spoken tutorial workshops
applying aspect mining techniques to understand an existing program
applying code analysis and 3d design pattern grouping to facilitate program comprehension
applying plan recognition algorithms to program understanding
applying program comprehension techniques to karel robot programs
applying program understanding technology to ibm product documentation
applying the decorator pattern for profiling objectoriented software
applying the signature concept to planbased program understanding
applying webmining techniques to execution traces to support the program comprehension process
approach to limit the wynot problem
approaches to clustering for program comprehension and remodularization
approaches to program comprehension
arcc assistant for repetitive code comprehension
archetypal source code searches a survey of software developers and maintainers
architectural level hypothesis testing through reverse engineering of objectoriented software
architectural reasoning in archjava
architectural repair of open source software
architectural views through collapsing strategies
architecture comprehension tools for a pbx system
architecture recovery and abstraction from the perspective of processes
architecture recovery and evaluation aiming at program understanding and reuse
architecture recovery of dynamically linked applications a case study
architecture recovery using latent semantic indexing and kmeans an empirical evaluation
archjava connecting software architecture to implementation
are decomposition slices clones
are static analysis violations really fixed a closer look at realistic usage of sonarqube
are test smells really harmful an empirical study
are visual programming languages better the role of imagery in program comprehension
"array resizing for scientific code debugging, maintenance and reuse"
art an architectural reverse engineering environment
artifact driven communication to improve program comprehension
artifacts recovery and understanding using high level models
artifacts recovery at different levels of abstractions
asking and answering questions during a programming change task
asking and answering questions during a programming change task in pharo language
aspect mining from the class diagram in program comprehension
aspect mining in procedural object oriented code
aspect mining in procedural objectoriented code
aspect mining using selforganizing maps with method level dynamic software metrics as input vectors
aspectcapable call path profiling of multithreaded java applications
aspectmaps a scalable visualization of join point shadows
aspectmaps extending moose to visualize aop software
aspectoriented approach to metamodel abstraction
aspects influencing featureoriented software comprehension observations from a focus group
aspects influencing featureoriented sofware comprehension observations from a focus group
aspects of internal program documentation an elucidative perspective
assert use and defectiveness in industrial code
assessing an architectures ability to support feature evolution
"assessing and estimating corrective, enhancive, and reductive maintenance tasks a controlled experiment"
assessing irbased traceability recovery tools through controlled experiments
assessing software archives with evolutionary clusters
assessing the collaboration quality in the pair program tracing and debugging eyetracking experiment
assessing the comprehension of uml class diagrams via eye tracking
assessing the contribution of the individual alpha frequency (iaf) in an eegbased study of program comprehension
assessing the effect of requirements traceability for software maintenance
assessment of learner\{z}s algorithms
assessment of learners algorithms
assessment of support for program understanding
assisted software exploration using formal concept analysis
assisting the comprehension of legacy transactions
asynchronous gaze sharing towards a dynamic help system to support learners during program comprehension
atomic architectural component recovery for program understanding and evolution
attachable software visualization for multiplethread programs
attack diagnosis on binary executables using dynamic program slicing
attention in software maintenance an eye tracking study
audiohighlight code skimming for blind programmers
augmenting abstract syntax trees for program understanding
augmenting code with in situ visualizations to aid program understanding
augmenting java method comments generation with context information based on neural networks
augmenting patternbased architectural recovery with flow analysis mosaic a case study
augmenting source code lines with sample variable values
author index
autocomment mining question and answer sites for automatic comment generation
autofolding for source code summarization
automated analysis of scientific and engineering semantics
automated assessment in cs
automated assessment in cs1
automated assistance to program understanding
automated chunking to support program comprehension
automated classification of class rolestereotypes via machine learning
automated construction of memory diagrams for program comprehension
automated debugging in eclipse
automated detection of test fixture strategies and smells
automated documentation of android apps
automated extraction of database interactions in web applications
automated identification of tasks in development sessions
automated multilanguage artifact binding and rename refactoring between java and dsls used by java frameworks
automated objectoriented reusable component identification
automated path generation for software fault localization
automated program understanding by concept recognition
automated quality analysis of component software for embedded systems
automated reverse engineering of uml sequence diagrams for dynamic web applications
automated slicing of aspectoriented programs using bytecode analysis
automated software license analysis
automated support for legacy code understanding
automated support for program refactoring using invariants
automatic algorithm recognition of sourcecode using machine learning
automatic approach to recovering ood models from c++ programs
automatic comment generation using only source code
automatic conversion of sql statement into clamshell diagram
automatic derivation of concepts based on the analysis of source code identifiers
automatic design pattern detection
automatic detection of feature envy using machine learning techniques [makine öğrenmesi yöntemlerini kullanarak özellik kıskançlığının otomatik saptanması]
automatic detection of interaction patterns for parallel program analysis and development
automatic diagnosis of student programs in programming learning environments
automatic documentation generation via source code summarization of method context
automatic documentation of [mined] feature implementations from source code elements and usecase diagrams with the revpline approach
automatic extraction of a wordnetlike identifier network from software
automatic extraction of abstractobjectstate machines from unittest executions
automatic extraction of heap reference properties in objectoriented programs
automatic generation of natural language summaries for java classes
automatic generation of opaque constants based on the kclique problem for resilient data obfuscation
automatic generation of package diagram to understand java packages
automatic grading of student programs based on program understanding
automatic hierarchical clustering of static call graphs for program comprehension
automatic identification of class stereotypes
automatic identification of key classes in a software system using webmining techniques
automatic identifier inconsistency detection using code dictionary
automatic inference of stationary fields a generalization of javas final fields
automatic problem description from model program for knowledgebased programming tutor
automatic recognition of design motifs using semantic conditions
automatic recognition of students sorting algorithm implementations in a data structures and algorithms course
automatic segmentation of method code into meaningful blocks design and evaluation
automatic segmentation of method code into meaningful blocks to improve readability
automatic source code summarization of context for java methods
automatic source code transformation for gpus based on program comprehension
automatic tag recommendation for software development video tutorials
automatic variable classification for cobol programs
automatically assessing code understandability
automatically assessing code understandability how far are we
automatically assessing code understandability reanalyzed combined metrics matter
automatically classifying posts into question categories on stack overflow
automatically detecting and describing high level actions within methods
automatically detecting integrity violations in databasecentric applications
automatically detecting the quality of the query and its implications in irbased concept location
automatically detecting the scopes of source code comments
automatically detecting the uptodate status of todo comments in java programs
automating a domain model aware reengineering methodology
automating business intelligence recovery from a webbased system
autonomous mental development for algorithm recognition
autumn leaves curing the window plague in ides
auxiliary method for code commit comprehension based on coreclass identification
awareness and comprehension in software/systems engineering practice and education trends and research directions
backward conditioning a new program specialisation technique and its application to program comprehension
bayesian unigrambased inference for expanding abbreviations in source code
bcd decomposing binary code into components using graphbased clustering
beacons a knowledge structure in program comprehension
beacons an initial program comprehension
beacons in computer program comprehension
beacons in program comprehension
behavioral profiles&mdash;a way to model and validate program behavior
behavioral profilesa way to model and validate program behavior
behaviordriven design pattern recovery
behaviorinformed algorithms for automatic documentation generation
behavioural validation of software engineering artefacts
beyond gaze preliminary analysis of pupil dilation and blink rates in an fmri study of program comprehension
binary code clone detection across architectures and compiling configurations
binarylevel lightweight data integration to develop program understanding tools for embedded software in c
bitlevel taint analysis
blackbox understanding of cots components
blaze
blended analysis for performance understanding of frameworkbased applications
block model an educational model of program comprehension as a tool for a scholarly approach to teaching
blooms taxonomy a framework for assessing programmers knowledge of software systems
brain activity measurement during program comprehension with nirs
breaking the programming language barrier using program visualizations to transfer programming knowledge in one programming language to another
bridging program comprehension tools by design navigation
browsing and searching software architectures
browsing software architectures with lsedit
bug localization using latent dirichlet allocation
bug localization with combination of deep learning and information retrieval
bug report enrichment with application of automated fixer recommendation
building a research infrastructure for program comprehension observations
building an integrated software maintenance environment from a maintainers perspective
building approximate calling context from partial call traces
building domain specific dictionaries of verbobject relation from source code
building executable union slices using conditioned slicing
building extensions for applications towards the understanding of extension possibilities
building program understanding tools using visitor combinators
building usage contexts during program comprehension
business intelligence recovery from legacy code
butterflies a visual approach to characterize packages
bytecodebased class dependency extraction tool bytecodecdet
can better identifier splitting techniques help feature location
can clone detection support test comprehension
can formal methods improve the efficiency of code reviews
can information retrieval techniques effectively support traceability link recovery
can lexicon bad smells improve fault prediction
can students reengineer
can we predict dependencies using domain information
capturing expert knowledge for automated configuration fault diagnosis
capturing interface protocols to support comprehension and evaluation of c++ libraries
capturing software traceability links from developers eye gazes
case studies of optimized sequence diagram for program comprehension
case study of feature location using dependence graph
"case study of feature location using dependence graph, after 10 years"
cataloging design abstractions
categorization of concerns a categorical program comprehension model
categorizing developer information needs in software ecosystems
categorizing variations of studentimplemented sorting algorithms
ccevovis a clone evolution visualization system for software maintenance
ccspec a correctness condition specification tool
"cerberus tracing requirements to source code using information retrieval, dynamic analysis, and program analysis"
challenges and requirements for an effective trace exploration tool
challenges in behavioral code clone detection
change impact analysis an earthquake metaphor
changesetbased topic modeling of software repositories
characterization and assessment of the linux configuration complexity
characterizing a source code model with energy measurements
characterizing and understanding development sessions
characterizing the informal knowledge contained in systems
characterizing the transfer of program comprehension in onboarding an informationpush perspective
checkdep a tool for tracking software dependencies
checklist inspections and modifications applying blooms taxonomy to categorise developer comprehension
chive a program source visualisation framework
class level code summarization based on dependencies and micro patterns
classification of apis by hierarchical clustering
classifying change types for qualifying change couplings
"classifying data dependences in the presence of pointers for program comprehension, testing, and debugging"
cldiff generating concise linked code differences
clichebased environment to support architectural reverse engineering
clocom mining existing source code for automatic comment generation
clone detection and elimination for haskell
"clone detection why, what and how"
clustering and recommending collections of code relevant to tasks
clustering classes in packages for program comprehension
clustering software artifacts based on frequent common changes
clustering support for static concept location in source code
clustering the source code
cobot static c/c++ bug detection in the presence of incomplete code
coconut code comprehension nurturant using traceability
cocoviz with ambient audio software exploration
code bubbles a working setbased interface for code understanding and maintenance
code clone graph metrics for detecting diffused code clones
code clones in rhino a case study
code comment quality analysis and improvement recommendation an automated approach
code comprehension activities in undergraduate software engineering course a case study
code comprehension problems as learning events
code or (not code) separating formal and natural language in cs education
code park a new 3d code visualization tool
code patterns for automatically validating requirementstocode traces
code phonology an exploration into the vocalization of code
code querying by uml
"code readability testing, an empirical study"
code smells revisited a variability perspective
code structure visualization using 3dflythrough
code understanding
code understanding through program transformation for reusable component identification
code vectors understanding programs through embedded abstracted symbolic traces
"code, camera, action how software developers document and share program knowledge using youtube"
codeattention translating source code to comments by exploiting the code constructs
codecompass an open software comprehension framework for industrial usage
codecrawler an information visualization tool for program comprehension
codemetropolis code visualisation in minecraft
codemetropolis eclipse over the city of source code
codersmuse multimodal data exploration of programcomprehension experiments
codes mining source code descriptions from developers discussions
codesurveyor mapping largescale software to aid in code comprehension
codetopics which topic am i coding now
codification pedagogy for introductory courses
cognitive architectures a way forward for the psychology of programming
cognitive design elements to support the construction of a mental model during software visualization
"cognitive ergonomic research at sapu, sheffield"
cognitive processes in program comprehension
cognitive processes in program comprehension an empirical analysis in the context of software reengineering
cognitive task difficulty analysis using eeg and data mining
coherent clusters in source code
coherent dependence clusters
collections frameworks for pointsto analysis
collective code bookmarks for program comprehension
columbus schema for c/c++ preprocessing
comb computing relevant program behaviors
combined code understanding and comment understanding
combining conceptual and domainbased couplings to detect database and code dependencies
combining dynamic analysis and visualization to explore the distribution of unit test suites
combining dynamic program viewing and testing in early computing courses
combining formal concept analysis with information retrieval for concept location in source code
combining lexical and structural information for static bug localisation
combining microblogging and ide interactions to support developers in their quests
combining preprocessor slicing with c/c++ language slicing
combining probabilistic ranking and latent semantic indexing for feature identification
combining static and dynamic analyses to reverseengineer scenario diagrams
combining static and dynamic reasoning for the discovery of program properties
commenting source code is it worth it for small programming tasks
comments as a sublanguage a study of comment grammar and purpose
committees
compactly representing parallel program executions
comparing bug replication in regular and micro code clones
comparing generalpurpose and domainspecific languages an empirical study
comparing graphbased program comprehension tools to relational databasebased tools
comparing heuristic and machine learning approaches for metricbased code smell detection
comparing of feedbackcollection and thinkaloud methods in program comprehension studies
comparing program comprehension of physically and virtually separated concerns
comparing programming language comprehension between novice and expert programmers using eeg analysis
comparing the evostreets visualization technique in two d and threedimensional environments a controlled experiment
comparing trace visualizations for program comprehension through controlled experiments
comparison of a visual and a textual notation to express data constraints in aspectoriented join point selections a controlled experiment
comparison of backward slicing techniques for java
compiler optimization pass visualization the procedural abstraction case
complete and platformindependent calling context profiling for the java virtual machine
complexity is in the brain of the beholder a psychological perspective on software engineerings ultimate challenge
complexity measures for rulebased programs
component interface identification and behavioral model discovery from software execution data
component visualization methods for large legacy software in c/c++
"comprehending a complex, distributed, objectoriented software system a report from the field"
comprehending and visualizing software based on xml representations and call graphs
comprehending aspectoriented programs challenges and open issues
comprehending by varying focal distance
comprehending reality practical barriers to industrial adoption of software maintenance automation
comprehending scenariolevel software evolution using calling context trees
comprehending studies on program comprehension
comprehending web applications by a clustering based approach
comprehension and dependency analysis of aspectoriented programs through declarative reasoning
comprehension and maintenance of largescale multilanguage software applications
comprehension by derivation
comprehension effort and programming activities related or not related
comprehension first evaluating a novel pedagogy and tutoring system for program tracing in cs1
comprehension of adssupported and paid android applications are they different
comprehension of objectoriented software cohesion the empirical quagmire
comprehension of safetycritical systems using domainspecific languages
comprehension of software analysis data using 3d visualization
comprehension oriented software fault location
comprehension strategies and difficulties in maintaining objectoriented systems an explorative study
comprehension support during knowledge transitions learning from field
comprehension support of sql statement using doubletree structure
comprehension with[in] virtual environment visualisations
"comprehensionfirst pedagogy and adaptive, intrinsically motivated tutorials"
comprehensive practice on service engineering an experimental solution
compression techniques to simplify the analysis of large execution traces
concept analysis a new framework for program understanding
concept analysis&mdash;a new framework for program understanding
concept assignment problem in program understanding
concept location and program comprehension in serviceoriented software
concept location using formal concept analysis and information retrieval
conceptaware live programming integrating topic models for program comprehension into live programming environments
concepts and methodologies for knowledgebased program understanding the alpuss approach
concepts for slicing objectoriented programs
conceptual interpretation of sql execution traces for program comprehension
concernoriented source code projections
concise and consistent naming
concise and consistent naming ten years later
condensing class diagrams by analyzing design and network metrics using optimistic classification
"conditional statements, looping constructs, and program comprehension an experiments study"
conference committee
conference committees
configuring latent dirichlet allocation based feature location
conflictaware optimal scheduling of code clone refactoring a constraint programming approach
confounding parameters on program comprehension a literature survey
connecting architecture reconstruction frameworks
connecting technical communicators with technical developers
connecting traces understanding clientserver interactions in ajax applications
consistent layout for thematic software maps
constructing feature model by identifying variabilityaware modules
constructing usage scenarios for api redocumentation
constructivism and program comprehension strategies
consus a scalable approach to conditioned slicing
context and vision studying two factors impacting program comprehension
contextaware software documentation
contractbased slicing helps on safety reuse
contracts specifying behavioral compositions in objectoriented systems
contribution to program comprehension by program analysis application to numerical programs
conventionality analysis of array objects in javascript
copyright page
core technologies for system renovation
correct by construction approach for translation of stored procedures to java code
corrections to the effectiveness of control structure diagrams in source code comprehension activities
correlating program code to output for supporting program understanding
coss comprehension by ontologising software system
could we infer unordered api usage patterns only using the library source code
cover art
cracking her codes understanding shared technology resources as positioning artifacts for power and status in cscl environments
crawling ajaxbased web applications through dynamic analysis of user interface state changes
creating important statement type comments in autocomment automatic comment generation framework
creating specifications from code reverse‐engineering techniques
crista a tool to support code comprehension based on visualization and reading technique
criteria for program comprehension derived from software complexity metrics
critical section investigator building story visualizations with program traces
crocopat efficient pattern analysis in objectoriented programs
cross version defect prediction with representative data via sparse subset selection
crosscutting patterns and design stability an exploratory analysis
crosslanguage bug localization
crosslanguage code analysis and refactoring
crowdsummarizer automated generation of code summaries for java programs through crowdsourcing
ctrail a program comprehension approach for leveraging learning models in automated code trail generation
current parsing techniques in software renovation considered harmful
cyberfilm a visual approach that facilitates program comprehension
data access visualization for legacy application maintenance
data flow metrics in program comprehension tasks
data mining source code to facilitate program comprehension experiments on clustering data retrieved from c++ programs
data model comprehension an empirical comparison of er and uml class diagrams
database reverse engineering from requirements to care tools
datacentered program understanding
dcube tool for dynamic design discovery from multithreaded applications using pin
dealing with identifiers and comments in source code comprehension and maintenance results from an ethnographicallyinformed study with students and professionals
debcheck efficient checking for open source code clones in software systems
debugging by asking questions about program output
debugging data flows in reactive programs
debugging into examples
debugging into examples leveraging tests for program comprehension
debugging mpi programs on the grid using geclipse
debugging revisited toward understanding the debugging needs of contemporary software developers
declarative versus imperative process modeling languages the issue of understandability
decode a cooperative environment for reverseengineering legacy software
decode a cooperative program understanding environment
decoding the representation of code in the brain an fmri study of code review and expertise
decomposing legacy programs a first step towards migrating to clientserver platforms
deep code comment generation
deep code comment generation with hybrid lexical and syntactical information
deepvisual a visual programming tool for deep learning systems
delivering comprehension features into source code editors through lsp
delocalized plans and program comprehension
delta extraction an abstraction technique to comprehend why two objects could be related
demanddriven contextsensitive alias analysis for java
demonstration of jive and jove java as it happens
depdigger a tool for detecting complex lowlevel dependencies
dependence analysis of concurrent programs based on reachability graph and its applications
dependence cluster visualization
dependence clusters in source code
dependence communities in source code
dependencecache slicing a program slicing method using lightweight dynamic information
dependent types for program understanding
deploying smart program understanding on a large code base
derivation and presentation of an abstract program space for ada
deriving a state model of a control program by symbolic execution
deriving path expressions recursively
descriptive compound identifier names improve source code comprehension
design and implementation of a finegrained software inspection tool
design and implementation of an extensible and modifiable refactoring tool
design defects detection and correction by example
design of a generic reverse engineering assistant tool
design of a toolset for dynamic analysis of concurrent java programs
design of flexible static program analyzers with pql
design of wholeprogram analysis tools
design pattern detection by normalized cross correlation
design pattern detection by using meta patterns
design pattern directed clustering for understanding open source code
design pattern mining using greedy algorithm for multilabelled graphs
design pattern mining using state space representation of graph matching
design pattern recovery based on annotations
design pattern recovery in objectoriented software
design recovery for distributed systems
design recovery of a two level system
designcode traceability recovery selecting the basic linkage properties
designing an understanding and debugging tool (udt) for objectoriented programming language
designing selfexplanation environment for multilayer understanding. in case of program understanding
designing useful tools for developers
designing your next empirical study on program comprehension
detecting and comparing brain activity in short program comprehension using eeg
detecting and summarizing gui changes in evolving mobile apps
detecting and visualising process relationships in erlang
detecting and visualizing refactorings from software archives
detecting clones in android applications through analyzing user interfaces
detecting design similarity patterns using program execution traces
detecting interaction coupling from task interaction histories
detecting patterns and antipatterns in software using prolog rules
detecting program changes from edit history of source code
detecting similar applications with collaborative tagging
detection of highlevel execution patterns in reactive behavior of control programs
detection of software evolution phases based on development activities
determining comprehension and quality of tv programs using eyegaze tracking
determining relationship between eyegaze distribution and comprehension of tv programs
developer interaction traces backed by ide screen recordings from think aloud sessions
developer reading behavior while summarizing java methods size and context matters
developer support for understanding preprocessor macro expansions
developerrelated factors in change prediction an empirical assessment
developers ask reachability questions
developing an approach for the recovery of distributed software architectures
developing application specific ontology for program comprehension by combining domain ontology with code ontology
developing visual expertise in software engineering an eye tracking study
development of smalltalk in china
difference in brain activity by variable and conditional branch in source code
digging the development dust for refactorings
digital conference like software tool for pdp programs
dime a direct manipulation environment for evolutionary development of software
direction and scope of comprehensionrelated activities by procedural and objectoriented programmers an empirical study
directly characterizing cross core interference through contention synthesis
discipline matters refactoring of preprocessor directives in the #ifdef hell
discovering and mining use case model in reverse engineering
discovering comprehension pitfalls in class hierarchies
discovering important source code terms
discovering loners and phantoms in commit and issue data
discovering use cases from source code using the branchreserving call graph
discriminating influences among instructions in a dynamic slice
dissect distribution for security tool
dnit a new approach for design pattern detection
do architectural design decisions improve the understanding of software architecture two controlled experiments
do background colors improve program comprehension in the #ifdef hell
do class comments aid java program understanding
do code smells impact the effort of different maintenance programming activities
do crosscutting concerns cause modularity problems
do developers update thirdparty libraries in mobile apps
do dynamic object process graphs support program understanding a controlled experiment
do dynamic object process graphs support program understanding a controlled experiment.
do extracted state machine models help to understand embedded software
do professional developers benefit from design pattern documentation a replication in the context of source code comprehension
do program transformations help reverse engineering
do software developers understand open source licenses
do software models based on the uml aid in sourcecode comprehensibility aggregating evidence from 12 controlled experiments
do visualizations improve program comprehensibility experiments with control structure diagrams for java
do you remember this source code
doc3d a system for threedimensional visualization of a software system architecture
docio documenting api input/output examples
docket program comprehensioninthelarge
document retrieval metrics for program understanding
documentation for software engineers what is needed to aid system understanding
documenting and sharing knowledge about code
documenting designpattern instances a family of experiments on sourcecode comprehensibility
documenting software systems using types
documenting software systems with views iii towards a taskoriented classification of program visualization techniques
documenting software systems with views v towards visual documentation of design patterns as an aid to program understanding
documenting software systems with views vi lessons learned from 15 years of research & practice
documenting software systems with views vi lessons learned from 15 years of research and practice
documenting the mined feature implementations from the objectoriented source code of a collection of software product variants
does bleu score work for code migration
does syntax highlighting help programming novices
does the combined use of class and sequence diagrams improve the source code comprehension results from a controlled experiment
does the discipline of preprocessor annotations matter a controlled experiment
does the documentation of design pattern instances impact on source code comprehension results from two controlled experiments
does the refactor to understand reverse engineering pattern improve program comprehension
"domain matters bringing further evidence of the relationships among antipatterns, application domains, and qualityrelated metrics in java mobile apps"
domain model as problemoriented architecture application for mobile applications
domainretargetable reverse engineering
domainretargetable reverse engineering ii personalized user interfaces
dowsing a tool framework for domainoriented browsing of software artifacts
dpdx towards a common result exchange format for design pattern detection tools
dpdxtowards a common result exchange format for design pattern detection tools
dpjf design pattern detection with high accuracy
dsi an evidencebased approach to identify dynamic data structures in c programs
dsibin identifying dynamic data structures in c/c++ binaries
dsoli data structure operation location and identification
dynamic analysis for reverse engineering and program understanding
dynamic analysis of ada programs for comprehension and quality measurement
dynamic analysis of software systems through virtual reality [análise dinâmica de sistemas de software por meio de realidade virtual]
dynamic analysis of software systems using execution pattern mining
dynamic analysis of sql statements for dataintensive applications reverse engineering
dynamic analysis techniques to reverse engineer mobile applications
dynamic data structure analysis for java programs
dynamic heap type inference for program understanding and debugging
dynamic model design recovery and architecture abstraction of object oriented software
dynamic object process graph extraction for program understanding and protocol recovery
dynamic object process graphs
dynamic pointsto sets a comparison with static analyses and potential applications in program understanding and optimization
dynamic program slicing in understanding of program execution
dynamic shape analysis via degree metrics
dynamic slicing of concurrent specification languages
dynamic slicing of objectoriented programs in presence of inheritance
dynamic synthesis of program invariants using genetic programming
dynaria a tool for ajax web application comprehension
early field experience with the software reconnaissance technique for program comprehension
easing program comprehension by sharing navigation data
ecological footprints as case studies in programming
editorial guest editors introduction
effect of modularization and comments on program comprehension.
effective exploration and visualization of large execution traces
effective identifier names for comprehension and memory
effective pattern matching of source code using abstract syntax patterns
effective size an example of use from legacy systems
"effective, automatic procedure extraction"
effectiveness and efficiency of a domainspecific language for highperformance marine ecosystem simulation a controlled experiment
effectiveness of flowcharting as a scaffolding tool to learn python
effects of decomposition techniques on knowledgebased program understanding
effects of different flow insensitive pointsto analyses on def/use sets
effects of explicit feature traceability on program comprehension
effects of gender and abstract thinking factors on adolescents computer program learning
effects of pointers on data dependences
effects of variable names on comprehension an empirical study
efficient mapping of software system traces to architectural views
efficient monitoring and display of thread state in java
efficient object querying for java
efficient search for inputs causing high floatingpoint errors
efficient token based clone detection with flexible tokenization
efficient utilization of secondary storage for scalable dynamic slicing
effort estimation for program comprehension
eliminating data race warnings using csp
eliminating redundancies with a composition with adaptation metaprogramming technique
elucidative programming in java
embedding programming context into source code
embedding spatial software visualization in the ide an exploratory study
empirical analysis of faultproneness in methods by focusing on their comment lines
empirical assessment of uml static object diagrams
empirical evaluation of a uml sequence diagram with adornments to support understanding of thread interactions
empirical evaluation of collaborative support for distributed pair programming
empirical evaluation of diagrams of the runtime structure for coding tasks
empirical evaluation of hypertextual information access from program text
empirical research plan effects of sketching on program comprehension
empirical studies on programming language stimuli
empirical studies on the nlp techniques for source code data preprocessing
empirical study of the dynamic behavior of javascript objects
empirically evaluating the usefulness of software visualization techniques in program comprehension activities
empirically studying software practitioners bridging the gap between theory and practice
enabling clone detection for ethereum via smart contract birthmarks
enabling integrated development environments with natural user interface interactions
enabling modularity and reuse in dynamic program analysis tools for the java virtual machine
enabling program comprehension through a visual objectfocused development environment
enforcing constraints between documentary comments and source code
engaging african american elementary school children in code understanding
enhancing basecode protection in aspectoriented programs
enhancing domainspecific software architecture recovery
enhancing objectoriented programming comprehension using optimized sequence diagram
enhancing polymetric views with coarsegrained views
enhancing program comprehension formatting and documenting
enhancing program comprehension with recovered state models
enhancing program readability and comprehensibility with tools for program visualization
enhancing program readability and comprehensibility with tools for program visualization.
enhancing software visualization with information retrieval
enhancing the analysis of large multimedia applications execution traces with frameminer
enhancing understanding of discrete event simulation models through analysis
enriching program comprehension for software reuse
ensuring wellbehaved usage of apis through syntactic constraints
entity based source code summarization (ebscs)
equivalence hypothesis testing in experimental software engineering
erose guiding programmers in eclipse
error report driven postmortem analysis
evaluating an early software engineering course with projects and tools from open source software
evaluating aspect mining techniques a case study
evaluating c++ design pattern miner tools
evaluating process clusters to support automatic program understanding
evaluating reuse and program understanding in archmine architecture recovery approach
evaluating software clustering algorithms in the context of program comprehension
evaluating software inspection cognition levels using blooms taxonomy
evaluating software maintenance support tools for their support of program comprehension
evaluating source code summarization techniques replication and expansion
evaluating the accessor classification approach to detect abstract data types
evaluating the effectiveness of explicit instruction in reducing program reasoning fallacies in elementary level students
evaluating the reference and representation of domain concepts in apis
evaluating the use of sound in static program comprehension
evaluating using animation to improve understanding of sequence diagrams
evaluation and usability of programming languages and tools (plateau)
evaluation framework of hypertext access for program comprehension support
evaluation of a knowledgebased approach to program understanding
evaluation of design pattern recovery tools
evaluation of diagnosis support methods in program debugging by trace analysis an exploratory study
evaluation of programming competency using student error patterns
evaluation of the itoc information system design recovery tool
evaluation of the replace constructors with creation methods refactoring in java systems
eventbased performance analysis
evolution storyboards visualization of software structure dynamics
evolving a legacy application portfolio at sallie mae program comprehension and beyond
evolving decision trees for the categorization of software
evolving ispell a case study of program understanding for reuse
evolving object oriented design to improve code traceability
examining programmers cognitive skills using regular language
exceptiontracer a solution recommender for exceptions in an integrated development environment
executable program documentation based on debugging break points
execution trace abstraction based on meta patterns usage
execution trace analysis through massive sequence and circular bundle views
exemplifying moldable development
expanding identifiers to normalize source code vocabulary
"expectationbased, inferencebased, and bottomup software comprehension"
"expectationbased, inferencebased, and bottomup software comprehension research articles"
experience from measuring program comprehension. toward a general framework
experience report an industrial experience report on test outsourcing practices
experience report thinkathon countering an &#34;i got it working&#34; mentality with pencilandpaper exercises
experience with an extensible workspace for analysis of lowlevel usage data
experience with fade for the visualization and abstraction of software views
experiences in automatic leveling of data flow diagrams
experiences in program understanding
experiences in teaching software evolution and program comprehension
experimental analysis of the cognitive processes of program maintainers during software maintenance
experimental evaluation of hypertext access structures
experimental investigations of the utility of detailed flowcharts in programming
experimental program analysis
experimental program analysis a new paradigm for program analysis
experimental settings in program comprehension challenges and open issues
experiments in identifying reusable abstract data types in program code
expert maintainers strategies and needs when understanding software a case study approach
expert problem solving strategies for program comprehension
expertise in computer programming exploring commonalities between code comprehension and generation activities
explaining the dynamic structure and behavior of java programs using a visual debugger (abstract only)
explaining why methods change together
exploiting runtime information in the ide
exploiting text mining techniques in the analysis of execution traces
exploiting type hints in method argument names to improve lightweight type inference
exploiting uml dynamic object modeling for the visualization of c++ programs
exploration of the use of auditory cues in code comprehension and navigation for individuals with visual impairments in a visual programming environment
exploratory study of program comprehension strategies of procedural and objectoriented programmers
exploring cheap type inference heuristics in dynamically typed languages
exploring cognitive processes in program comprehension based on eyemovement analysis (abstract only)
exploring java software vocabulary a search and mining perspective
exploring largescale system similarity using incremental clone detection and live scatterplots
exploring legacy systems using types
exploring software measures to assess program comprehension
exploring the influence of identifier names on code quality an empirical study
exploring the inventors paradox applying jigsaw to software visualization
exploring the neighborhood with dora to expedite software maintenance
exploring the relationships between design metrics and package understandability a case study
exploring the use of concern element role information in feature location evaluation
exploring theory of cognition for general theory of software engineering
exploring theory of cognition for general theory of software engineering predicting the effort of programming language comprehension
exploring tools and strategies used during regular expression composition tasks
exploring topic models in software engineering data analysis a survey
expression of abstraction self explanation in code production
expressions of abstraction selfexplanation in code production
expressiveness and effectiveness of program comprehension thoughts on future research directions
extending bug localization using information retrieval and code clone location techniques
extending pl/i for structured programming
extending software quality assessment techniques to java systems
extension of the educational system that can generate explanation of programs for handling programs in which pointers are used
extracting and answering why and why not questions about java program output
extracting business logic from existing cobol programs as a basis for redevelopment
extracting business rules from source code
extracting candidates of microservices from monolithic application code
extracting concepts from file names; a new file clustering criterion
extracting interactionbased stateful behavior in rich internet applications
extracting meaning from abbreviated identifiers
extracting reusable components a semiautomated approach for complex structures
extracting source code from emails
extracting visual contracts from java programs
extraction of domain concepts from the source code
eye movements in code reading relaxing the linear order
eye tracking analysis of computer program comprehension in programmers with dyslexia
eye tracking and program comprehension
eye tracking in computing education
eyemovement modeling examples in source code comprehension a classroom study
faceted navigation for software exploration
facilitating program comprehension by mining association rules from source code
facilitating program comprehension via generic components for state machines
facilitating scenariobased program comprehension with topic models
facilitating the comprehension of c programs an experimental study
factbase and decomposition generation
factors impacting novice code comprehension in a tutor for introductory computer science
fapu workbench
fast extraction of highquality frameworkspecific models from application code
fast static analysis of c++ virtual function calls
"fast, flexible syntactic pattern matching and processing"
fault localization during system testing
feature commander colorful #ifdef world
feature driven browsing
feature engineering for clustering student solutions
feature identification a novel approach and a case study
feature identification an epidemiological metaphor
feature interactions in objectoriented effect systems from a viewpoint of program comprehension ((w) workinprogress paper)
feature location based on impact analysis
feature location for multilayer system based on formal concept analysis
feature location in source code a taxonomy and survey
feature location using data mining on existing testcases
feature location using probabilistic ranking of methods based on execution scenarios and information retrieval
feature location via information retrieval based filtering of a single scenario execution trace
feature maps a comprehensible software representation for design pattern detection
feature profiling for evolving systems
featurecommander colorful #ifdef world
featuredriven program understanding using concept analysis of execution traces
featureide taming the preprocessor wilderness
featureous a tool for featurecentric analysis of java software
feedbag an interaction tracker for visual studio
feedforward and recurrent neural networks for source code informal information analysis
fepss a flexible and extensible program comprehension support system
filtered mining in program code repositories
finding components in a hierarchy of modules a step towards architectural understanding
finding duplicate code in java using beacons and idioms
finding inputs that reach a target expression
finding key classes in objectoriented software systems by techniques based on static analysis
finding objects in procedural programs an alternative approach
finding the right needles in hay
finding the right needles in hay helping program comprehension of large software systems
findsmells flexible composition of bad smell detection strategies
finegrained and accurate source code differencing
finegrained design pattern detection
firedetective understanding ajax client/server interactions
first international workshop on metamodels and schemas for reverse engineering atem 2003
fission for program comprehension
flat3 feature location and textual tracing tool
flexible design pattern detection based on feature types
flexible lowcost activities to develop novice code comprehension skills in schools
flow insensitive c++ pointers and polymorphism analysis and its application to slicing
fluid source code views
focal structures and information types in prolog
focusing on execution traces using diver
folding an approach to enable program understanding of preprocessed languages
follow the path debugging state anomalies along execution histories
foreword
formative evaluation of information retrieval techniques applied to software catalogues
foundation for program understanding
framework instantiation using cookbooks constructed with static and dynamic analysis
framing program comprehension as fault localization
frappé querying the linux kernel dependency graph!
from code comprehension model to tool capabilities
from code to design a reverse engineering approach
from code understanding needs to reverse engineering tool capabilities
from obfuscation to comprehension
from program comprehension to people comprehension
from program comprehension to tool requirements for an industrial environment
from reality to programs and (not quite) back again
from source code identifiers to natural language terms
from subpatterns to patterns an approach to the detection of structural design pattern instances by subgraph mining and merging
from system comprehension to program comprehension
functionpoint analysis using design specifications based on the unified modelling language
functiontheoretic principles of program understanding
fundamental nanopatterns to characterize and classify java methods
fused datacentric visualizations for software evolution environments
fusing ambiguous domain knowledge slices in a reverse engineering process
gaze as a proxy for cognition and communication
"gaze behaviour in computer programmers with dyslexia considerations regarding code style, layout and crowding"
gccxfront exploiting gcc as a front end for program comprehension tools via xml/xslt
gendmg a generic graph representation layout to visualize existing software artifacts
generalized selective xml markup of source code using agile parsing
generating inductive shape predicates for runtime checking and formal verification
generating parameter comments and integrating with method summaries
generating refactoring proposals to remove clones from automated system tests
generating reproducible and replayable bug reports from android application crashes
generating suggestions for initial program investigation using dynamic analysis
giving meaning to macros
glyphs for software visualization
goaldriven combination of software comprehension approaches for component based development
gql a graphics query language for software maintenance environment.
granularitydriven dynamic predicate slicing algorithms for message passing systems
graph data management of evolving dependency graphs for multiversioned codebases
graph services for program understanding tools
graphical description for communication relationship in concurrent programs
graphical expression of sql statements using clamshell diagram
graphical vs. textual representation an empirical study of novices program comprehension
greater understanding through maintainer driven traceability
gsee a generic software exploration environment
guest editorial program comprehension
guest editors introduction to the special issue on program comprehension icpc 2014
guest editors introduction to the special section on the 2009 international conference on program comprehension (icpc 2009)
gui code tracing through direct program interaction
guita toolkit interactiondriven code tracing
handling large search space in patternbased reverse engineering
hardtoanswer questions about code
harnessing a refinement theory to compute loop functions
have we already totally understood program comprehension [haben wir programmverstehen schon ganz verstanden]
"hdpv interactive, faithful, invivo runtime state visualization for c/c++ and java"
heapviz interactive heap visualization for program understanding and debugging
"help, help, im being suppressed the significance of suppressors in software testing"
helpful or not an investigation on the feasibility of identifier splitting via cnnbilstmcrf
helping program comprehension of large software systems by identifying their most important classes
heuristicbased partofspeech tagging of source code identifiers and comments
hey! are you committing tangled changes
hic diagnosing object churn in frameworkbased applications
hidden dependencies in program comprehension and change propagation
hidden dependencies in software systems
hierarchical abstraction of execution traces for program comprehension
highlevel polymetric views of condensed runtime information
highlevel views of distributed executions convex abstract events
highmcc functions in the linux kernel
history slicing assisting codeevolution tasks
holistic recommender systems for software engineering
how design notations affect the comprehension of web applications
how design notations affect the comprehension of web applications special issue articles
how developers copy
how developers document pull requests with external references
how do api changes trigger stack overflow discussions a study on the android sdk
how do design decisions affect the distribution of software metrics
how do professional developers comprehend software
how do program understanding tools affect how programmers understand programs
how does execution information help with informationretrieval based bug localization
how does feature dependency affect configurable system comprehensibility
how effective developers investigate source code an exploratory study
how novices read source code in introductory courses on programming an eyetracking experiment
how professional hackers understand protected code while performing attack tasks
how programmers read regular code a controlled experiment using eye tracking
how should static analysis tools explain anomalies to developers
how slim will my system be estimating refactored code size by merging clones
how the evolution of emerging collaborations relates to code changes an empirical study
how to compare program comprehension in fosd empirically an experience report
how to interconnect operational and behavioral views of web applications
how to make fillinblank program problems and its evaluation
how understanding and restructuring differ from compiling a rewriting perspective
how webmining and coupling metrics improve early program comprehension
how “friendly” integrated development environments are
hsml design directed source code hot spots
hypersoft system tool demonstration and use example
hypothesisbased concept assignment to support software maintenance
hypothesisdriven understanding processes during corrective maintenance of large scale software
i know what you did last summer an investigation of how developers spend their time
ice binary analysis that you can see
icsd interactive visual support for understanding code control structure
ideindependent program comprehension tools via source file overwriting
identification of behavioural and creational design motifs through dynamic analysis
identification of design roles for the assessment of design quality in enterprise applications
identification of dynamic comprehension processes during large scale maintenance
identification of idiom usage in c++ generic libraries
identifier length and limited programmer memory
identifying and addressing problems in framework reuse
identifying and locating interference issues in php applications the case of wordpress
identifying architectural change patterns in objectoriented systems
identifying class name inconsistency in hierarchy a first simple heuristic
identifying classes in legacy javascript code
identifying code clones having high possibilities of containing bugs
identifying code smells with collaborative practices a controlled experiment
identifying code smells with multiple concern views
identifying comprehension bottlenecks using program slicing and cognitive complexity metrics
identifying computational phases from interprocess communication traces of hpc applications
identifying core objects for trace summarization by analyzing reference relations and dynamic properties
identifying core objects for trace summarization using reference relations and access analysis
identifying crosscutting concerns using software repository mining
identifying data transfer objects in ejb applications
identifying design patterns in objectoriented software systems using unsupervised learning
identifying dynamic data structures by learning evolving patterns in memory
identifying features of android apps from execution traces
identifying functionally similar code in complex codebases
identifying key classes in objectoriented software using generalized kcore decomposition
identifying knowledge divergence by vocabulary monitoring in software projects
identifying objects in legacy systems
identifying software components from objectoriented apis based on dynamic analysis
identifying structural features of java programs by analysing the interaction of classes at runtime
identifying use cases in source code
identifying word relations in software a comparative study of semantic similarity tools
ifl an interactive environment for understanding feature implementations
illustrated programming
immediacy through interactivity online analysis of runtime behavior
immv an interactive multimatrix visualization for program comprehension
impact of coding style checker on code review a case study on the openstack projects
impact of limited memory resources
impact of the visitor pattern on program comprehension and maintenance
impacts of coding practices on readability
implementation of a patternmatching approach for identifying algorithmic concepts in scientific fortran programs
implementation of conceiver++ an objectoriented program understanding system
implementation techniques for efficient dataflow analysis of large programs
implementing scoped method tracing with contextjs
improved cognitive information complexity measure a metric that establishes program comprehension effort
improving automated source code summarization via an eyetracking study of programmers
improving code readability classification using convolutional neural networks
improving code readability models with textual features
improving component coupling information with dynamic profiling
improving comprehensibility of source code via traceability information a controlled experiment
improving computer program readability to aid modification
improving designpattern identification a new approach and an exploratory study
improving dynamic software analysis by applying grammar inference principles
improving feature location by enhancing source code with stereotypes
improving functional programming understanding through studentcreated instructional videos
improving identifier informativeness using part of speech information
improving irbased traceability recovery using smoothing filters
improving knowledgebased program understanding by introducing separated information analysis and uncertainty reasoning techniques
improving predictive models of cognitive complexity using an evolutionary computational approach a case study
improving program comprehension by answering questions (keynote)
improving program comprehension by automatic metamodel abstraction
improving program comprehension by combining code understanding with comment understanding
improving program comprehension by enhancing program constructs an analysis of the umple language
improving program understanding by unfolding layers of interacting patterns
improving readability of iconic programs with multiple view object representation
improving slice accuracy by compression of data and control flow paths
improving software comprehension through an automated dependency tracer
improving software maintenance efficiency with behaviorbased cognitive models
improving source code lexicon via traceability and information retrieval
improving source code quality through the definition of linguistic antipatterns
improving source code readability theory and practice
improving student programming skills by developing program comprehension abilities panel discussion
improving the tokenisation of identifier names
improving the visibility of graphical program displays an experimental study
improving topic model source code summarization
improving traceability link recovery methods through software artifact summarization
in search of a simple visual vocabulary
in support of peer code review and inspection in an undergraduate software engineering course
inbug visual analytics of bug repositories
incorporating probabilistic reasoning in a reactive program debugging system
increasing diversity natural language measures for software fault prediction
incremental annotategeneralizesearch framework for interactive source code comprehension
incremental call graph reanalysis for aspectj software
incremental exploratory visualization of relationships in large codebases for program comprehension
incremental feature location and identification in source code
incremental pointsto analysis for java via edit propagation
indentation simply a matter of style or support for program comprehension
index of authors
individual differences in program comprehension strategies in unfamiliar programming systems
industrial case study on supporting the comprehension of system behaviour under load
industrial experience with an integrated code comprehension model
industrial program comprehension challenge 2011 archeology and anthropology of embedded control systems
industrial realities of program comprehension
industrial realities of program comprehension (irpc 2008)
industrial tools for the feature location problem an exploratory study
industrial tools for the feature location problem an exploratory study practice articles
inferencebased and expectationbased processing in program comprehension
inferring hierarchical motifs from execution traces
inferring programmers intention by the use of context structure model of programs
inferring semantically related words from software context
inferring types by mining class usage frequency from inline caches
inferring usecases from gui analysis
inferring visual contracts from java programs
influence of domainspecific notation to program understanding
influence of synchronized domain visualizations on program comprehension
inform a framework for performance informed software development
information foraging as a foundation for code navigation (nier track)
information foraging as a foundation for code navigation nier track
information types and cognitive principles in program comprehension towards adaptable support for novice visual programmers
information visualisation utilising 3d computer game engines case study a source code comprehension tool
infosound an audio aid to program comprehension
infusing topic modeling into interactive program comprehension an empirical study
injecting execution traces into a modeldriven framework for program analysis
inline now youre coding with portals
"innovating in india designing for constraint, computing for inclusion (keynote)"
inputtracer a dataflow analysis tool for manual program comprehension of x86 binaries
instance pointcuts for program comprehension
instrumenting timesensitive software for feature location
integrated hypertext and program understanding tools
integrated intelligent programming environment for learning programming
integrated reverse engineering process model
integrating concerns with development environments
"integrating information retrieval, execution and link analysis algorithms to improve feature location in software"
integrating protocol contracts with java code
integrating reverse engineering tools using a servicesharing methodology
integrating runtime values with source code to facilitate program comprehension
integrating the soot compiler infrastructure into an ide
integration of generic program analysis tools into a software development environment
integrative levels of program comprehension
intensions are a key to program comprehension
interactive measures for mining understandable state machines from embedded software experiments and case studies
interactive model mining from embedded legacy software
interactive semiautomated specification mining for debugging an experience report
interactive variable classification technique to support the maintenance of cobol business application systems
interactive views to improve the comprehension of uml models an experimental validation
intermodular slicing of objectoriented programs
internetscale code search
interprocedural analysis for program comprehension by specialization
introducing parameter sensitivity to dynamic codeclone analysis methods
introduction to dynamic program analysis with disl
introduction to the special issue on program comprehension through dynamic analysis (pcoda)
inventive tool use to comprehend big code
investigating attributes that characterize important classes in object oriented systems
investigating eye movements in natural language and c++ source code a replication experiment
investigating program behavior using the texada ltl specifications miner
investigating reverse engineering technologies for the cas program understanding project
investigating the effect of evolution and refactorings on feature scattering
investigating the impact of code smells on systems quality an empirical study on systems of different application domains
investigating the relation between lexical smells and change and faultproneness an empirical study
invited talk
iot end user programming models
irish a hidden markov model to detect coded information islands in free text
is aspectoriented programming a rewarding investment into future code changes a sociotechnical study on development and maintenance time
is there any difference in novice comprehension of a small program written in the eventdriven and objectoriented styles
isolating causeeffect chains from computer programs
isolating causeeffect chains with askigor
isolating faults in complex cotsbased systems
itmviz interactive topic modeling for source code analysis
itrace enabling eye tracking on software artifacts within the ide to support software engineering tasks
itrace eye tracking infrastructure for development environments
itrace overcoming the limitations of short code examples in eye tracking experiments
its duck (typing) season!
jackal a hierarchical approach to program understanding
jan java animation for program understanding
java applications comprehension by discovering clusters of related classes
java2sequence a tool for the visualization of objectoriented programs in introductory programming
jbooret an automated tool to recover oo design and source models
jcomp a reusedriven componentization framework for java applications
jcsd visual support for understanding code control structure
ji.fi visual test and debug queries for hard realtime
jiriss an eclipse plugin for source code exploration
jit feedback what experienced developers like about static analysis
jive java interactive visualization environment
jive visualizing java in action. demonstration description
jp2 callsite aware calling context profiling for the java virtual machine
jpet an automatic testcase generator for java
jripples a tool for program comprehension during incremental change
jsnose detecting javascript code smells
jstereocode automatically identifying method and class stereotypes in java code
jsummarizer an automatic generator of natural language summaries for java classes
jtourbus simplifying program understanding by documentation that provides tours through the source code
kernelgraph understanding the kernel in a graph
key elements extraction and traces comprehension using gestalt theory and the helmholtz principle
keynote i neil maiden
keynote ii gail murphy
keynotes
kieker continuous monitoring and on demand visualization of java software behavior
knowledge transfer from research to industry a survey on program comprehension
knowledgebased approach to the analysis of code and program design language (pdl)
labeling featureoriented software clusters for software visualization application
labeling source code with information retrieval methods an empirical study
labeling source code with metadata a survey and taxonomy
lack of conceptual cohesion of methods a new alternative to lack of cohesion of methods
lackwit a program understanding tool based on type inference
lagrein visualizing user requirements and development effort
landfill an open dataset of code smells with public evaluation
language support for service interactions in serviceoriented architecture
languageindependent information flow tracking engine for program comprehension tools
languages & visualizations to enable effective end user programming
languages &amp; visualizations to enable effective end user programming
lascad languageagnostic software categorization and similar application detection
layered explanations of software a methodology for program comprehension
layered program auralization using music to increase runtime program comprehension and debugging effectiveness
leap lightweight deterministic multiprocessor replay of concurrent java programs
learning a classifier for prediction of maintainability based on static analysis tools
learning a metric for code readability
learning lexical features of programming languages from imagery using convolutional neural networks
learning to generate pseudocode from source code using statistical machine translation
legacy software reverseengineering and comprehension by interpretations
lesdroid a tool for detecting exported service leaks of android applications
lessons from a domainbased reengineering effort
lessons learned from programmers experiences with oneway constraints
lessons learned from programmers experiences with oneway constraints research articles
leveraged quality assessment using information retrieval techniques
leveraging the agile development process for selecting invoking/excluding tests to support feature location
lexical categories for source code identifiers
license usage and changes a largescale study of java projects on github
lightweight extraction of object models from bytecode
lightweight impact analysis using island grammars
lightweight structured visualization of assembler control flow based on regular expressions
limpio lightweight mpi instrumentation
linguistic antipatterns what they are and how developers perceive them
linguistic driven refactoring of source code identifiers
"linking code readability, structure, and comprehension among novices its complicated"
linsen an efficient approach to split identifiers and expand abbreviations
live programming and software evolution questions during a programming change task
live programming in practice a controlled experiment on state machines for robotic behaviors
live trace visualization for comprehending large software landscapes the explorviz approach
live visualization of gui application code coverage with guitracer
loaf a framework and infrastructure for creating online adaptive solutions
"locating and understanding features of complex software systems by synchronizing time, collaboration and codefocused views on execution traces"
locating bugs without looking back
locating features in dynamically configured avionics software
locating features in source code
locating program features using execution slices
locating the meaning of terms in source code research on term introduction
lock removal for concurrent trace programs
logtracker learning log revision behaviors proactively from software evolution history
looks can mean achieving understanding eye gaze patterns of proficiency in code comprehension
lost comments support program comprehension
ludwig2 decoupling program representations from processing models
macro impact analysis using macro slicing
mad a top down approach to parallel program debugging
maintaining a cots integrated solution are traditional static analysis techniques sufficient for this new programming methodology
maintaining a legacy towards support at the architectural level
"maintaining program understanding issues, tools, and future directions"
maintaining traceability links between implementationlevel restrictions and source code for program understanding
maintenance of embedded systems supporting program comprehension using dynamic analysis
maintenance of service oriented architecture composite applications static and dynamic support
maintenance support for object oriented programs
make it simple an empirical analysis of gnu make feature use in open source projects
making the code look like the design aspects and other recent work
"managing a multifile, multilanguage software repository for program comprehension tools a generic approach"
"managing a multifile, multilanguage software repository for program comprehension tools {$\frac{3}{4}$} a generic approach"
managing design tradeoffs for a program understanding and transformation tool
managing views in a program understanding tool
manipulating and documenting software structures using shrimp views
manually locating features in industrial source code the search actions of software nomads
mapo mining api usages from open source repositories
maximizing functional cohesion of comprehension environments by integrating user and task knowledge
meaningful identifier names the case of singleletter variables
meaningful variable names for decompiled code a machine translation approach
meaningfulness as a factor of program complexity
measurement of source code readability using word concreteness and memory retention of variable names
measuring class importance in the context of design evolution
measuring code quality to improve specification mining
measuring computer program comprehension
measuring difficulty of program comprehension based on brain activation
measuring distance between program features
measuring interprocess communications in distributed systems
measuring mangled name ambiguity in large c/ c++ projects
measuring neural efficiency of program comprehension
measuring program comprehension a largescale field study with professionals
measuring program understanding
measuring programming experience
measuring the accuracy of information retrieval based bug localization techniques
measuring the cognitive load of software developers a systematic mapping study
measuring the complexity of traces using shannon entropy
measuring the difficulty of code comprehension tasks using software metrics
measuring the extent of source code readability using regression analysis
measuring the impact of code dependencies on software architecture recovery techniques
measuring the impact of lexical and structural inconsistencies on developers’ cognitive load during bug localization
mediating diverse visualisations for comprehension
mediating turf battles! prioritizing shared modules in locating multiple features
meditor inference and application of api migration edits
memory indexing canonicalizing addresses across executions
"mendel a model, metrics, and rules to understand class hierarchies"
mental representations constructed by experts and novices in objectoriented program comprehension
mental representations of programs by novices and experts
message from the chairs
message from the general and program chairs
message from the general and program cochairs
message from the general chair
message from the general chair and program chairs
message from the general cochairs
message from the program chair
message from the program chairs
message from the program cochairs
messages versus messengers in distributed programming
metaevaluation as a tool for program understanding
metainterpretation of recursive listprocessing programs
metaruleguided association rule mining for program understanding
method name suggestion with hierarchical attention networks
method of software testing based on program understanding
metric attitude
metric pictures the approach and applications
metricattitude a visualization tool for the reverse engineering of object oriented software
metricattitude++ enhancing polymetric views with information retrieval
metricbased analysis of contextfree grammars
metrics for measuring the effectiveness of decompilers and obfuscators
"metrics for quantifying the disparity, concentration, and dedication between program components and features"
metrics to identify where objectoriented program comprehension benefits from the runtime structure
metricsbased evaluation of slicing obfuscations
metropoljs visualizing and debugging largescale javascript program structure with treemaps
mierucompiler integrated visualization tool with horizontal slicing for educational compilers
mining anomalies in objectoriented implementations through execution traces
mining business topics in source code using latent dirichlet allocation
mining concepts from code with probabilistic topic models
mining dataflow sensitive specifications
mining errorhandling specifications for systems software
mining iterative generators and representative rules for software specification discovery
mining java class naming conventions
mining logical clones in software revealing highlevel business and programming rules
mining message sequence graphs
mining object usage models
mining patterns and rules for software specification discovery
mining software repositories for traceability links
mining source code descriptions from developer communications
mining source code elements for comprehending objectoriented systems and evaluating their maintainability
mining source codes of programming learners by selforganizing maps
mining systemuser interaction traces for use case models
mining temporal rules for software maintenance
mining the ecosystem to improve type inference for dynamically typed languages
mining the lexicon used by programmers during sofware evolution
"mining the mind, minding the mine grand challenges in comprehension and mining"
mining unit tests for code recommendation
mining version histories for detecting code smells
mixed reality for learning programming
modelbased tools to record program understanding
modeling changeset topics for feature location
modeling code analyzability at method level in j2ee applications
modeling framework api evolution as a multiobjective optimization problem
modeling the ownership of source code topics
modelling the informationseeking behaviour of programmers an empirical approach
"moldable, contextaware searching with spotter"
monitoring user interactions for supporting failure reproduction
moose a taskdriven program comprehension environment
moral dominance relations for program comprehension
moving towards objective measures of program comprehension
mp net as abstract model of communication for messagepassing applications
mtf a scalable exchange format for traces of high performance computing systems
mudpie layers in the ball of mud
multidimensional exploration of api usage
multilanguage and heterogeneouslylicensed software analysis
multilingual source code analysis a systematic literature review
multiple coordinated views to support aspect mining using program slicing
multiple visualizations and debugging how do we coordinate these
multiscale visual comparison of execution traces
multitouch for software exploration
multiview editing of software product lines with peopl
mutt a multithreaded tracer for java programs
my repository runneth over an empirical study on diversifying data sources to improve feature search
nativespeaker identifying crypto misuses in android native code libraries
natural language parsing of program element names for concept extraction
naturalistic types
navigation and comprehension of programs by novice programmers
navtracks supporting navigation in software
netdroid summarizing network behavior of android apps for network code maintenance
neural code comprehension a learnable representation of code semantics
neural detection of semantic code clones via treebased convolution
neuralmachinetranslationbased commit message generation how far are we
nicad accurate detection of nearmiss intentional clones using flexible prettyprinting and code normalization
nomen est omen analyzing the language of function identifiers
nonconcurrency analysis
normalizing objectoriented class styles in javascript
normalizing source code vocabulary
normalizing source code vocabulary to support program comprehension and software quality
novice code understanding strategies during a software maintenance assignment
novice comprehension of objectoriented oo programs an empirical study
novice comprehension of small programs written in the procedural and objectoriented styles
novice difficulties in selection structure
novice programmers reasoning about reversing conditional statements
novices progress in introductory programming courses
obfuscating java programs by translating selected portions of bytecode to native libraries
object oriented software clustering based on community structure
object visualization support for learning data structures
objectcentric debugging
objectoriented codes representation of program understanding system
"objectoriented program comprehension effect of expertise, task and phase"
observations of student competency in a cs1 course
observations on the connectedness between requirementstocode traces and calling relationships for trace validation
observing and measuring cognitive support steps toward systematic tool evaluation and engineering
obstacles in using frameworks and apis an exploratory study of programmers newsgroup discussions
octobubbles a multiview interactive environment for concurrent visualization and synchronization of uml models and code
on constructing a tool to verify programs for processors built in machines
on designing an experiment to evaluate a reverse engineering tool
on dynamic feature location
on evaluating the layout of uml class diagrams for program comprehension
on evaluating the layout of uml diagrams for program comprehension
on expanding abbreviated identifiers in the source code
on inserting program understanding technology into the software change process
on managing classes for evolving software
on mapping releases to commits in open source systems
on measuring the difficulty of program comprehension based on cerebral blood flow
on method ordering
on migrating a legacy application to the palm platform
on selecting software visualization tools for program understanding in an industrial context
on software odysseys and how to prevent them
on some enduser programming constructs and their understandability
on state machine mining from embedded control software
on the automatic modularization of software systems using the bunch tool
on the challenges novice programmers experience in developing iot systems a survey
on the comparability of software clustering algorithms
on the comprehension of program comprehension
on the comprehension of security risk scenarios
on the discovery of business processes orchestration patterns
on the effect of code regularity on comprehension
on the effect of the query in irbased concept location
on the effectiveness of accuracy of automated feature location technique
on the equivalence of information retrieval methods for automated traceability link recovery
"on the human, organizational, and technical aspects of software development and analysis"
on the impact of uml analysis models on sourcecode comprehensibility and modifiability
on the importance of understanding the strategies that developers use
on the knowledge required to understand a program
on the meaning of computer programs
on the naturalness of autogenerated code can we identify autogenerated code automatically
on the necessity of empirical studies in the assessment of modularization mechanisms for crosscutting concerns
on the optimal order of reading source code changes for review
on the proactive and interactive visualization for feature evolution comprehension an industrial investigation
on the properties of designrelevant classes for design anomaly assessment
on the relationships between domainbased coupling and code clones an exploratory study
on the role of hypotheses during opportunistic understanding while porting large scale code
on the role of program understanding in reengineering tasks
on the role of static analysis during software maintenance
on the stability of software clustering algorithms
on the uniqueness of code redundancies
on the use of a multiple view interactive environment for matlab and octave program comprehension
on the use of automated text summarization techniques for summarizing source code
on the use of domain terms in source code
on the use of information retrieval to automate the detection of thirdparty java library migration at the method level
on the use of virtual reality in software visualization the case of the city metaphor
on the use of visual clustering to identify landmarks in code navigation
on using a benchmark to evaluate c++ extractors
on using the web as infrastructure for reengineering
on using tree visualisation techniques to support source code comprehension
on visualization and comprehension of scenariobased programs
ontology authoring and linked data generation from web applications
ontology learning and its application in softwareintensive projects
ontologybased program comprehension tool supporting website architectural evolution
open source programmers information seeking during software maintenance
oracleguided componentbased program synthesis
organisational trails through software systems
organizing committee
overcoming language dichotomies toward effective program comprehension for mobile app development
overview of program comprehension
paaa an implementation of programming assignments automatic assessing system
package patterns for visual architecture recovery
padla a dynamic log level adapter using online phase detection
panel on program understandingdoes it offer hope for aging software
pap recognizer a tool for automatic recognition of parallelizable patterns
parallel pointsto analysis for multicore machines
parallel program analysis and restructuring by detection of pointtopoint interaction patterns and their transformation into collective communication constructs
parceive interactive parallelization based on dynamic analysis
parsing c++ despite missing declarations
parsing minimization when extracting information from code in the presence of conditional compilation
partial comprehension of complex programs (enough to perform maintenance)
partial domain comprehension in software evolution and maintenance
partial evaluation for program comprehension
partofspeech tagging of program identifiers for improved textbased software engineering tools
"patcher an online service for detecting, viewing and patching web application vulnerabilities"
pathbased function embedding and its application to errorhandling specification mining
pathbased function embeddings
patrools visualizing the polymorphic usage of class hierarchies
pattern matching for clone and concept detection
pattern recognition of the selection sort algorithm
pattern recognition techniques applied to the abstraction of traces of interprocess communication
pattern visualization for software comprehension
patterns of syntax theme customization for code editors
patternsupported architecture recovery
pedagogical transformations in the ubc cs science education initiative
peopl projectional editing of product lines
peter hilton on naming
pfn a novel program feature network for program comprehension
phalanx parallel checking of expressive heap assertions
physical and conceptual identifier dispersion measures and relation to fault proneness
pitekün an experimental visual tool to assist code navigation and code understanding
placement optimization using data context collected during garbage collection
plagiarism detection for multithreaded software based on threadaware software birthmarks
planbased representations of pascal and fortran code
points to analysis for program understanding
pointsto analysis for program understanding
pointsto analysis in almost linear time
polycare a tool for reengineering multilanguage program integrations
polymorphism in the spotlight studying its prevalence in java and smalltalk
portable and accurate collection of callingcontextsensitive bytecode metrics for the java virtual machine
position paper on research infrastructure for reengineering
poster knowledge transfer from research to industry a survey on program comprehension
poster pathbased function embeddings
pql a language for specifying abstract program views
practical eye tracking with itrace
practical static analysis for inference of securityrelated program propertie
pre/post conditioned slicing
precise and scalable querying of syntactical source code patterns using sample code snippets and a database
predicatebased dynamic slicing of message passing programs
predicting dependences using domainbased coupling
preface to the special issue on program comprehension
presenting microtheories of program comprehension in pattern form
prevalence of bad smells in pl/sql projects
prevalence of confusing code in software projects atoms of confusion in the wild
primm exploring pedagogical approaches for teaching textbased programming in school
prioritized testdriven reverse engineering process a case study
prioritizing maintainability defects based on refactoring recommendations
probabilistic analysis based on symbolic game semantics and model counting
probabilistic calling context
probabilistic component identification
problem solving grammars as formal tools for intelligent cai
proceedings 11th ieee international workshop on program comprehension
proceedings 12th international workshop on program comprehension
proceedings 1994 ieee 3rd workshop on program comprehension wpc 94
proceedings 9th international workshop on program comprehension. iwpc 2001
proceedings fifth international workshop on program comprehension. iwpc97
proceedings fourth workshop on program comprehension
proceedings ieee second workshop on program comprehension (cat. no.93th05512)
proceedings iwpc 2000. 8th international workshop on program comprehension
proceedings of the 2009 ieee 17th international conference on program comprehension [usb welcome page]
proceedings seventh international workshop on program comprehension
proceedings. 12th ieee international workshop on program comprehension
proceedings. 13th international workshop on program comprehension
proceedings. 6th international workshop on program comprehension. iwpc98 (cat. no.98tb100242)
process aspects and social dynamics of contemporary code review insights from open source development and industrial practice at microsoft
processes in computer program comprehension
processing software source text in automated design recovery and transformation
professional status and expertise for uml class diagram comprehension an empirical study
profilebased approach to support comprehension of software behavior
program analysis and visualisation towards a declarative approach
program analysis for the automatic detection of programming plans applying slicing
program behavior discovery and verification a graph grammar approach
program clustering for comprehension based on fuzzy formal concept analysis
program committee
program comprehension
program comprehension a method of generating visualized uml class diagram
program comprehension and authentic measurement a scheme for analysing descriptions of programs
program comprehension and implications of human navigational approaches
program comprehension and software migration strategies
program comprehension and software reengineering
program comprehension as a learning process
program comprehension as fact finding
program comprehension beyond the line
program comprehension by visualization in contexts
program comprehension during software maintenance and evolution
program comprehension engines for automatic parallelization a comparative study
program comprehension experiences with gxl; comprehension for comprehension
program comprehension for domainspecific languages
program comprehension for the purpose of testing
program comprehension for userassisted test oracle generation
program comprehension for web services
program comprehension identifying learning trajectories for novice programmers
program comprehension in generative programming a history of grand challenges
program comprehension in multilanguage systems
program comprehension in preprocessorbased software
program comprehension investigating the effects of naming style and documentation
program comprehension levels of abstraction for novices
program comprehension of domainspecific and generalpurpose languages comparison using a family of experiments
program comprehension of domainspecific and generalpurpose languages replication of a family of experiments using integrated development environments
"program comprehension past, present, and future"
program comprehension present and future [程序理解 现状与未来]
program comprehension risks and opportunities in extreme programming
program comprehension support for knowledgebased parallelization
program comprehension techniques improve software inspections a case study
program comprehension through dynamic analysis
program comprehension through multiple simultaneous views a session with vined
program comprehension through reverseengineered sequence diagrams a systematic review
program comprehension through software habitability
program comprehension through the identification of abstract data types
program comprehension with dynamic recovery of code collaboration patterns and roles
program comprehension with fourlayered mental model
program concept recognition
program concept recognition and transformation
program factors as predictors of program readability
program factors as predictors of program readability.
program incomprehensibility evaluation for obfuscation methods with queuebased mental simulation model
program indentation and comprehensibility
program learning using static information and dynamic program execution slices
program querying with a soul the barista tool suite
program readability procedures versus comments
"program readability, closing keywords and prefixstyle intermediate keywords"
program redocumentation lessons learned & future challenges
program simplification as a means of approximating undecidable propositions
program slice browser
program slicing
program slicing based on specification
program slicing based software metrics towards code restructuring
program slicing in the presence of preprocessor variability
program slicing in understanding of large programs
program slicing methods and applications
program slicing technique a novel approach to improve programming skills in novice learners
program slicing to understand software generators
program slicing under uml scenario models
program slicing using weakest preconditions
program understandability feature analysis of modern approaches
program understanding and knowledge organization the influence of acquired schemata
program understanding and maintenance with the canto environment
program understanding and the concept assignment problem
program understanding as an expectationdriven activity
program understanding as constraint satisfaction
program understanding as constraint satisfaction representation and reasoning techniques
program understanding behavior during adaptation of large scale software
program understanding behavior during corrective maintenance of largescale software
program understanding behavior during debugging of large scale software
program understanding behavior during estimation of enhancement effort on small java programs
program understanding behaviour during enhancement of largescale software
program understanding by reduction sets
program understanding challenge for the 1990s
program understanding does it offer hope for aging software
program understanding during software adaptation tasks
program understanding environment based on the star approach to tool integration
program understanding in databases reverse engineering
program understanding models an historical overview and a classification
program understanding models and experiments
program understanding needs during corrective maintenance of large scale software
program understanding support environment
program understanding using ontologies and dynamic analysis
program understanding using program slivers an experience report
program understanding using program slivers&mdash;an experience report
program understanding using program sliversan experience report
program understanding with the lambda calculus
"program understanding, programming knowledge, modeling programs and programmers"
program understanding. challenge for the 1990s
program understandingdoes it offer hope for aging software
program verification by reachability searching over dynamic call tree
program view generation and change analysis using attributed dependency graphs
program visualisation using c++ lenses
programmer experience a systematic literature review
programmer experience level indicators.
programmerfriendly decompiled java
programming from the readers perspective toward an expectations approach
programming schemes in program understanding and maintenance an introduction
programming style changes in evolving source code
programming with ghosts
programming with small blocks
programs are knowledge bases
"progressive user interfaces for regressive analysis making tracks with large, lowlevel systems"
prometa a taxonomy for program metamodels in program reverse engineering
prompter a knowledge based support tool for code understanding
prompter a knowledge based support tool for code understanding.
proust knowledgebased program understanding
pruning the ast with hunks to speed up tree differencing
publishers information
pui a tool to support program understanding
pump a program understanding tool for modsim programs
quality analysis of source code comments
quantifying information leaks using reliability analysis
quantifying program comprehension with interaction data
quantifying programmers mental workload during program comprehension based on cerebral blood flow measurement a controlled experiment
quantifying the closeness between program components and features
quantifying the similiarities between source code lexicons
query technologies and applications for program comprehension
query technologies and applications for program comprehension (qtapc 2008)
querying source code using an algebraic query language
questions programmers ask during software evolution tasks
queuebased cost evaluation of mental simulation process in program comprehension
ranking crowd knowledge to assist software development
"rapid development of simple, custom program analysis tools"
rapid system understanding two cobol case studies
rclinker automated linking of issue reports and commits leveraging rich contextual information
rdroid leveraging android app analysis with static slice optimization
reading behavior and comprehension of c++ source code a classroom study
reading beside the lines indentation as a proxy for complexity metric
reading beside the lines indentation as a proxy for complexity metrics
reading hierarchies in code assessment of a basic computational skill
reading logic as code or as natural language text a randomized controlled trial experiment on the comprehensibility of objectoriented source code in comparison to natural language text
reading the documentation of invoked api functions in program comprehension
reajax a reverse engineering tool for ajax web applications
reasoning about faults in aspectoriented programs a metricsbased evaluation
recency types for analyzing scripting languages
recognition in a program understanding system
"recognizing algorithms using language constructs, software metrics and roles of variables an experiment with sorting algorithms"
recognizing algorithms using language constructs; software metrics and roles of variables an experiment with sorting algorithms
recognizing eye tracking traits for source code review
recognizing software bugspecific named entity in software bug repository
recognizing sorting algorithms with the c4.5 decision tree classifier
recognizing words from source code identifiers using speech recognition techniques
recommending automated extract method refactorings
recommending comprehensive solutions for programming tasks by mining crowd knowledge
recommending differentiated code to support smart contract update
recommending frequently encountered bugs
recommending rename refactorings
reconstructing ownership architectures to help understand software systems
recording concerns in source code using annotations
recovering and using usecasediagramtosourcecode traceability links
recovering business processes from business applications
recovering concepts from source code with automated concept identification
recovering conceptual roles of data in a program
recovering design artifacts from legacy systems using automata theory and formal specifications
recovering design patterns to support program comprehension
recovering designcode traces an aco based approach
recovering highlevel views of objectoriented applications from static and dynamic information
recovering runtime architecture models and managing their complexity using dynamic information and composite structures
recovering software architecture from the names of source files
recovering software specifications with inductive logic programming
recovering traceability links between business process and software system components
recovering traceability links between code and documentation
recovering uml class models from c++ a detailed explanation
recovering views of intersystem interaction behaviors
recovering workflows from functional tests
recovering workflows from multi tiered ecommerce systems
recovery of jump table case statements from binary code
recovery of objectoriented design patterns using static and dynamic analyses
recursion removal/introduction by formal transformation an aid to program development and program comprehension
redacting sensitive information in software artifacts
reducing maintenance effort through software operation knowledge an eclectic empirical evaluation
reducing program comprehension effort in evolving software by recognizing feature implementation convergence
reducing the level of complexity of working with model transformations
reengineering a reverse engineering portal to a distributed soa
reengineering embedded automotive software
reengineering web applications based on cloned pattern analysis
refined fluent builder in java
refining existing theories of program comprehension during maintenance for concurrent software
refining the control structure of loops using static analysis
reflexion models for state machine extraction and verification
regolive web site comprehension with viewpoints
regviz visual debugging of regular expressions
reimagining literate programming
relating identifier naming flaws and code quality an empirical study
relational views for program comprehension
relationships between documentation and maintenance activities
relo helping users manage context during interactive exploratory visualization of large codebases
relocating xml elements from preprocessed to unprocessed code
removal of design problems through refactorings are we looking at the right symptoms
removing code clones from industrial systems using compiler directives
renaming parts of identifiers consistently within code clones
reordering program statements for improving readability
reordering results of keywordbased code search for supporting simultaneous code changes
repdroid an automated tool for android application repackaging detection
repeatedlyexecutedmethod viewer for efficient visualization of execution paths and states in java
repent analyzing the nature of identifier renamings
replaying past changes in multideveloper projects
replicated synchronization for imperative bsp programs
replicating novices struggles with coding style
replicating parser behavior using neural machine translation
replication can improve prior results a github study of pull request acceptance
replicomment identifying clones in code comments
repovis visual overviews and fulltext search in software repositories
representation technology of process structure graph based on com
representationindependent program analysis
representing and accessing extracted information
representing and integrating dynamic collaborations in ides
representing cobol in prolog towards program comprehension and reengineering
requirements driven software evolution
requirements for an elucidative programming environment
requirements guided dynamic software clustering
requirementsdriven software reengineering framework
research and design of program abstract table based on uml class diagram
research challenges in the reverse engineering community
research reportthe relevance of application domain knowledge the case of computer program comprehension
research track session i program comprehension
research track session i — program comprehension
researching on md5s characteristics based on software reversing
resolving linkage anomalies in extracted software system models
responses to comprehension questions and verbal protocols as measures of computer program comprehension processes
restructuring parallel programs by transformation of pointtopoint interactions into collective communication
rethinking user interfaces for feature location
reticella an execution trace slicing and visualization tool based on a behavior model
retrieving information from data flow diagrams
retrofitting automatic testing through library tests reusing
reusability of mathematical software a contribution
reusable software documentation with phrase annotations
reuse in reverse engineering
reusing program investigation knowledge for code understanding
revealer a lexical pattern matcher for architecture recovery
revealing the relationship between architectural elements and source code characteristics
reverse engineering a roadmap
reverse engineering an iphone applications using dynamic analysis
reverse engineering ios mobile applications
reverse engineering is reverse forward engineering
reverse engineering journey from code to design
reverse engineering meets data analysis
reverse engineering of software threads a design recovery technique for large multiprocess systems
reverse engineering of the uml class diagram from c++ code in presence of weakly typed containers
reverse engineering of web based systems
reverse engineering pl/sql legacy code an experience report
reverse engineering scripting language extensions
reverse engineering using association rules
reverse engineering web applications the ware approach
reversearchitecting legacy software based on roles an industrial experiment
reverseengineering 1n associations from java bytecode using alias analysis
reverseengineering of an industrial software using the unified process an experiment
reviewers
revisiting models of human conceptualisation in the context of a programming examination
"rigian environment for software reverse engineering, exploration, visualization, and redocumentation"
robot on! a serious game for improving programming comprehension
role for chunking and fuzzy reasoning in a program comprehension and debugging tool
rolebased clustering of software modules an industrial size experiment
roptool a reverse engineering assistant tool for dynamic analysis
roster page
rtfm (read the factual mails) augmenting program comprehension with remail
rulebased assignment of comments to ast nodes in c++ programs
rulebased detection of design patterns in program code
runtime invocation analysis of api objects in large code base
runtimesearch ctrl+f for a running program
safely evolving preprocessorbased configurable systems
salientclass location help developers understand code change in code review
sarf map visualizing software architecture from feature and layer viewpoints
satisfying programmers information needs in apibased programming
scalability solutions for program comprehension through dynamic analysis
scalable automatic concept mining from execution traces
scalable interfaces to support program comprehension
scalable program comprehension for analyzing complex defects
scaling an objectoriented system execution visualizer through sampling
scaling up evaluation of code search tools through developer usage metrics
scan an approach to label and relate execution trace segments
scenario explorer interactive visualization of use cases
scenario oriented program slicing
scenariobased and valuebased specification mining better together
scenariobased comparison of clone detection techniques
scene using scenario diagrams and active text for illustrating objectoriented programs
scoped evaluating a composite visualisation of the scope chain hierarchy within source code
scotch testtocode traceability using slicing and conceptual coupling
scqam a scalable structured code quality assessment method for industrial software
sdexplorer a generic toolkit for smoothly exploring massivescale sequence diagram
search based software engineering for program comprehension
search by example in touchdevelop code search made easy
searching across paths
searching the state space a qualitative study of api protocol usability
seat a usable trace analysis tool
seclone a hybrid approach to internetscale realtime code clone search
segmenting large traces of interprocess communication with a focus on high performance computing systems
selecting open source software projects to teach software engineering
selfinferencing reflection resolution for java
semantic clone detection can source code comments help
semantic clone detection using method ioebehavior
semantic fault diagnosis automatic naturallanguage fault descriptions
semantic metrics metrics based on semantic aspects of software
semantic navigation strategies for scenariobased programming
semantic preserving language conversion by simple pattern matching
semantic reasoning in young programmers
semantic technologies in system maintenance
semantic technologies in system maintenance (stsm 2008)
semantic zooming of code change history
semanticbased extraction approach for generating source code summary towards program comprehension
semanticsbased reverse engineering of objectoriented data models
semiautomated debugging via binary search through a process lifetime
semiautomatic generation of parallelizable patterns from source code examples
sensing and supporting software developers focus
separating architectural concerns to ease program understanding
sequence coverage directed greybox fuzzing
sequence diagram slicing
session 1a report from the dagstuhl seminar on interoperability of reengineering tools
session 1b structurebehaviorfunction program understanding
"session details apis, metrics, dsls, program comprehension"
session details visualization for program comprehension and maintenance
"sfac, a tool for program comprehension by specialization"
sharing developers mental models through source code annotations
shimba an environment for reverse engineering java software systems
shimba&mdash;an environment for reverse engineering java software systems
shorter identifier names take longer to comprehend
shrimp views an interactive environment for exploring java programs
sideeffect removal transformation
sift a scalable iterativeunfolding technique for filtering execution traces
simplicity a key engineering concept for program understanding
simultaneous measurement of program comprehension with fmri and eye tracking a case study
slicebased dynamic memory modellinga case study
slicing aided design of obfuscating transforms
slicing and replaying code change history
slicing aspectoriented software
slicing concurrent java programs
slicing concurrent java programs using indus and kaveri
slicing finegrained code change history
slicing for architectural analysis
slicing xml documents using dependence graph
smartgroups focusing on taskrelevant source artifacts in ides
smell the coffee! uncovering java analysis issues
smells are sensitive to developers! on the efficiency of (un)guided customized detection
smileyan interactive tool for monitoring intermodule function calls
smurf a svmbased incremental antipattern detection approach
sniafl towards a static noninteractive approach to feature location
software architecture leverage for system/program comprehension
software architecture reconstruction why what how
software architecture recovery process based on objectoriented source code and documentation
software architecture transformations
software artefact traceability the neverending challenge
software artifacts extraction for program comprehension
software artifacts recovery using abstract regular expressions
software cartography thematic software visualization with consistent layout
software clustering based on behavioural features
software clustering based on omnipresent object detection
software clustering unifying syntactic and semantic features
software clustering using dynamic analysis and static dependencies
software components capture using graph clustering
software comprehension through concernbased queries
software engineers information seeking behavior in change impact analysis an interview study
software entities as bird flocks and fish schools
software errors and software maintenance management
software evolution aided by execution trace alignment
software evolution and profiling in a competitive environment
software evolution comprehension replay to the rescue
software landscape and application visualization for system comprehension with explorviz
software maintenance research in the progress project for predictable embedded software systems
software musification
software porting support with componentbased and language neutral source code analysis
software reconnaissance mapping program features to code
software reengineering method using domain models
software reflexion models bridging the gap between design and implementation
software reliability model with bathtubshaped fault detection rate
software restructuring an architecturebased tool
software reverse engineering to requirements
software systems as cities a controlled experiment
software visualisation for objectoriented program comprehension
software visualisation techniques adapted and extended for asynchronous hardware design
software visualisation using c++ lenses
software visualization for objectoriented program comprehension
software visualization today systematic literature review
software visualization tools survey and analysis
software visualization using topic models
software visualization with attachable display classes
software visualization with audio supported cognitive glyphs
sonification design guidelines to enhance program comprehension
sound as an aid in understanding lowlevel program architecture
source animation as a means of program comprehension
source animation as a means of program comprehension for objectoriented systems
source code analysis extractive approach to generate textual summary
source code comprehension analysis in software maintenance
source code comprehension strategies and metrics to predict comprehension effort in software maintenance and evolution tasks an empirical study with industry practitioners
source code files as structured documents
source code identifier splitting using yahoo image and web search engine
source code retrieval for bug localization using latent dirichlet allocation
source model analysis using the jjtraveler visitor combinator framework
sourcecode comprehension tasks supported by uml design models
sourcecode comprehension tasks supported by uml design models results from a controlled experiment and a differentiated replication
sourceminer a multiperspective software visualization environment
sourceminer evolution a tool for supporting feature evolution comprehension
sourceminer towards an extensible multiperspective software visualization environment
sourcerer mining and searching internetscale software repositories
special issue on information retrieval for program comprehension
special issue on program comprehension
specification mining in concurrent and distributed systems
"specification, verification, and synthesis using extended state machines with callbacks"
specifying and automatically generating a specialization tool for fortran 90
specifying dynamic analyses by extending language semantics
specifying the semantics of machine instructions
spinal tap high level analysis for heavy metal systems
sponsoring organizations
sponsors and patrons
sponsors and supporters
spotter towards a unified search interface in ides
spotting familiar code snippet structures for program comprehension
spreading knowledge about gnutella a case study in understanding netcentric applications
spy a flexible code profiling framework
srcptr a framework for implementing static pointer analysis approaches
state constraints and pathwise decomposition of programs
state profiling of internal variables
static analysis for inference of explicit information flow
static analysis for program understanding and debugging
static analysis for understanding shared objects in open concurrent java programs
static analysis of dataintensive applications
static and dynamic attribute slicing tool for objectoriented programs
static and dynamic distance metrics for featurebased code analysis
static information flow analysis with handling of implicit flows and a study on effects of implicit flows vs explicit flows
static techniques for concept location in objectoriented code
static trace extraction
staticgen static generation of uml sequence diagrams
steering committee
stratified sampling of execution traces execution phases serving as strata
strawberries are nuts
string analysis for x86 binaries
strongest postcondition semantics as the formal basis for reverse engineering
structural and behavioral code representation for program understanding
structural evolution of an open source system a case study
structural information based term weighting in text retrieval for feature location
structural knowledge and language notational properties in program comprehension
structural redocumentation a case study
structural visibility and program comprehension
structurally heterogeneous source code examples from unstructured knowledge sources
structure and chance melding logic and probability for software debugging
structure elicitation in database reverse engineering
structure transition graphs an ecg for program comprehension
structurebehaviorfunction program understanding
structured dynamic program slicing
structured source retrieval for improving software search during program comprehension tasks
structured source retrieval for improving softwaresearch during program comprehension tasks
studying onboarding to improve program comprehension tool support
studying the advancement in debugging practice of professional software developers
studying the effect of umlbased models on sourcecode comprehensibility results from a longterm investigation
studying the evolution of software systems using change clusters
studying the impact of social structures on software quality
studying the prevalence of exception handling antipatterns
studying work practices to assist tool design in software engineering
substring matching for clone detection and change tracking
subvocalization toward hearing the inner thoughts of developers
summarization of complex software artifacts
"summarization techniques for code, change, testing, and user feedback"
summarizing source code with transferred api knowledge
summarizing the content of large traces to facilitate the understanding of the behaviour of a software system
supervised categorization of javascripttm using program analysis features
support for understanding gui programs by visualizing execution traces synchronized with screen transitions
support of semantics recovery during code scavenging using repository classification
support vector machines for antipattern detection
supporting comprehension experiments with human subjects
supporting comprehension of unfamiliar programs by modeling an experts perception
supporting comprehension of unfamiliar programs by modeling cues
supporting concept assignment in the comprehension of web applications
supporting concept location through identifier parsing and ontology extraction
supporting cs1 with a program beacon recognition tool
supporting developers with natural language queries
supporting newcomers in software development projects
supporting program comprehension for refactoring operations with annotations
supporting program comprehension in agile with links to user stories
supporting program comprehension in large preprocessorbased software product lines
supporting program comprehension using dominance trees
supporting program comprehension using semantic and structural information
supporting program comprehension with program summarization
supporting program comprehension with source code summarization
supporting system development by novice software engineers using a tutorbased software visualization (tubvis) approach
supporting taskoriented navigation in ides with configurable heatmaps
supporting the evolution of a software visualization tool through usability studies
"svs, bors, svsi three strategies to relate problem and program domains"
swordnet inferring semantically related words from software context
symanalyzer a symbolic analysis tool for program comprehension
symbolic hybrid programming tool for software understanding
symbolic reductionist model for program comprehension
synchronized analysis of eye movement and eeg during program comprehension
synchronized uml diagrams for objectoriented program comprehension
synchrovis 3d visualization of monitoring traces in the city metaphor for analyzing concurrency
synctrace visual threadinterplay analysis
synonym suggestion for tags on stack overflow
syntactic approximation using iterative lexical analysis
syntactic/semantic interactions in programmer behavior a model and experimental results
"syntax, predicates, idioms what really affects code complexity"
"syntax, predicates, idioms — what really affects code complexity"
synthesis and analysis of automatic assessment methods in cs1 generating intelligent mcqs
synthesizing contention
system evolution tracking through execution trace analysis
system for inspection and quality assurance of software a knowledgebased experiment with code understanding
"systems evolution, components and services understanding the new software environment"
tackling knowledge needs during software evolution
tackling software navigation issues of the smalltalk ide
"tactile programming a unified manipulation paradigm supporting program comprehension, composition and sharing"
taggingsense method based on sensemaking for objectoriented source code comprehension
talk2c a tool for automatic migration
taming the dynamic behavior of javascript
tarimliq a new internal metric for software clustering analysis
tasks that can improve novices program comprehension
tassal autofolding for source code summarization
taupe towards understanding program comprehension
taupe visualizing and analyzing eyetracking data
taxtoolj a tool to catalog java classes
teaching programming understanding lecture capture youtube analytics
teaching recursion via control flow and code comprehension in cs1
teaching software engineering with projects
teaching software maintenance with open source software experiences and lessons
teaching students to understand large programs by understanding historical context
teaching undergraduate software engineering
teaching undergraduate software engineering by means of the evolution of opensource projects
techniques for the concept location and program understanding in componentbased software systems
temporal event analysis and program understanding
test complement exclusion guarantees from dynamic analysis
test intents enhancing the semantics of requirements traceability links in test cases
text retrieval approaches for concept location in source code
that is not my program investigating the relation between program comprehension and program authorship
the adherence of open source java programmers to standard coding practices
the ames approach to application understanding a case study
the case for a single data exchange format
the challenge of teaching students the value of programming best practices
the code minimap visualisation encoding conceptual structures within source code
the code time machine
the codecompass comprehension framework
the codesurfer software understanding platform
the cognitive assignment eclipse plugin
the conan tool to identify crosscutting concerns in object oriented systems
the concept assignment problem in program understanding
the concept of stratified sampling of execution traces
the concept project applying source code analysis to reduce information complexity of static and dynamic visualization techniques
the conceptual calculus for automatic program understanding
the daikon system for dynamic detection of likely invariants
the dependence condition graph precise conditions for dependence between program points
the design of the psi program synthesis system
the design of wholeprogram analysis tools
the discipline of preprocessorbased annotations does #ifdef tag nt #endif matter
the dynaria tool for the comprehension of ajax web applications by dynamic analysis
the eclipse runtime perspective for objectoriented code exploration and program comprehension
the effect of call graph construction algorithms for objectoriented programs on automatic clustering
the effect of delocalized plans on spreadsheet comprehension a controlled experiment
the effect of identifier naming on source code readability and quality
the effect of lexicon bad smells on concept location in source code
the effect of modularization and comments on program comprehension
the effect of objectoriented programming expertise in several dimensions of comprehension strategies
the effect of poor source code lexicon and readability on developers cognitive load
the effect of richer visualizations on code comprehension
the effect of scope delimiters on program comprehension
the effectiveness of control structure diagrams in source code comprehension activities
the effectiveness of source code obfuscation an experimental assessment
the effectiveness of zoom visual flow (zvif) technique in program comprehension activities
the effects of identifier retention and stop word removal on a latent dirichlet allocation based feature location technique
the effects of naming style and expertise on program comprehension
the effects of visual cues and learners field dependence in multiple external representations environment for novice program comprehension
the essence of inheritance
the evaluation of an approach for automatic generated documentation
the evolution of websites
the expansion of source code abbreviations using a language model
the feedback compiler
the gadfly an approach to architecturallevel system comprehension
the gestalt analysis of programs
the hermeneutics of program comprehension a holey quilt theory
the iacfgtool to generate the inter procedural aspect control flow graph
the impact analysis task in software maintenance a model and a case study
the impact of component interconnections on software quality a network analysis approach
the impact of identifier style on effort and comprehension
the impact of tools supported in integrateddevelopment environments on program comprehension
the impacts of function extraction technology on program comprehension a controlled experiment
the importance of ada programming support environments
the influence of color on program readability and comprehensibility
the influence of different aoi models in source code comprehension analysis
the influence of programmers cognitive complexity on program comprehension and modification
the influence of the task on programmer behaviour
the initial stage of program comprehension
the integrated software visualization model to support novices’ program comprehension
the interactive verification debugger effective understanding of interactive proof attempts
the interleaving problem in program understanding
the issue of monorepo and polyrepo in large enterprises
the last line effect
the mojo family a story about clustering evaluation (invited talk)
the nicad clone detector
the object repository pulling objects out of the ecosystem
the plague doctor a promising cure for the window plague
the program understanding problem analysis and a heuristic approach
the programmers apprentice knowledge based program editing
the psi program model builder synthesis of very highlevel programs
the relationship of slicing and debugging to program understanding
the relevance of application domain knowledge characterizing the computer program comprehension process
the relevance of application domain knowledge the case of computer program comprehension
"the relevance of software documentation, tools and technologies a survey"
the reuse of grammars with embedded semantic actions
the role of best practices to appraise open source software
the role of concepts in program comprehension
the role of experience and ability in comprehension tasks supported by uml stereotypes
the role of extrafoveal vision in source code comprehension
the role of open source software in program analysis for reverse engineering
the role of software measures and metrics in studies of program comprehension
the role of testing and dynamic analysis in program comprehension supports
the scent of a smell an extensive comparison between textual and structural smells
the semantics of abstract program slicing
the sextant software exploration tool
the software developers view on product metrics a surveybased experiment
the sound of software using sonification to aid comprehension
the sparamat approach to automatic comprehension of sparse matrix computations
the study of migration technology for message communication mechanism between heterogeneous platforms
the untapped potential of analyzing complete developer workflows
the use of code reading in teaching programming
the use of domain knowledge in program understanding
the use of eye tracking in software development
the use of reading technique and visualization for program understanding
the value of slicing while debugging
the vivide programming environment connecting runtime information with programmers system knowledge
the zark library of utility functions
theories and techniques of program understanding
"theories, methods and tools in program comprehension past, present and future"
"theories, tools and research methods in program comprehension past, present and future"
theory and practice of middleout programming to support program understanding
theorybased analysis of cognitive support in software comprehension tools
theres more to a model than code understanding and formalizing in silico modeling experience
theseus understanding asynchronous code
thin slicing
things structural clones tell that simple clones dont
through a mirror darkly how programmers understand legacy code
tidier an identifier splitting approach using speech recognition techniques
time series analysis of programmers eeg for debug state classification
title page i
title page iii
to camelcase or under_score
to camelcase or underscore
tool demonstration chet checking specifications in java systems
tool demonstration jive and jove java as it happens
tool support for finegrained software inspection
toolbased interactive software parallelization a case study
toolsupported customization of uml class diagrams for learning complex system models
topdown program comprehension with multilayer clustering based on lda
topology analysis of software dependencies
topology characters of the linux call graph
topology structure and centrality in a java source code
toward a constraintsatisfaction framework for evaluating programunderstanding algorithms
toward a constraintsatisfaction frameworkfor evaluating programunderstanding algorithms
toward a dynamic analysis technique to locate framework misuses that cause unexpected side effects
toward a framework for conceptual and formal outlines of programs
toward an understanding of the relationship between the identifier and comment lexicons
toward automatic artifact matching for tool evaluation
toward automatic summarization of arbitrary java statements for novice programmers
toward comprehension of side effects in framework applications as feature interactions
toward conjoint analysis of simultaneous eyetracking and fmri data for programcomprehension studies
toward full elasticity in distributed static analysis the case of callgraph analysis
toward interactionbased evaluation of visualization approaches to comprehending program behavior
toward introducing automated program repair techniques to industrial software development
toward intuitive programming languages
toward measuring program comprehension with functional magnetic resonance imaging
toward mining concept keywords from identifiers in large software projects
toward mining “concept keywords” from identifiers in large software projects
toward program representation and program understanding using process algebras
toward refactoring evaluation with code naturalness
toward summary extraction method for functional topic
toward understanding how developers recognize features in source code from descriptions
towards a benchmark and automatic calibration for irbased concept location
towards a better understanding of web applications
towards a client driven characterization of class hierarchies
towards a clone detection benchmark suite and results archive
towards a framework for program understanding
"towards a live, moldable code editor"
towards a model of conceptual transfer for students learning new programming languages
towards a modeldriven approach for reverse engineering design patterns
towards a multiview trace visualization environment
towards a new codebased software development concept enabling code patterns
towards a precise description of reverse engineering methods and tools
towards a reverse engineering dataflow analysis framework for java and c++
towards a semantic metrics suite for objectoriented design
towards a semanticbased approach for software reusable component classification and retrieval
towards a taxonomy of programmingrelated difficulties during maintenance
towards a technique for reverse engineering web transactions from a users perspective
"towards a tool for rigorous, automated code comprehension using symbolic execution and semantic analysis"
towards a unified software attack model to assess software protections
towards a uniform code annotation approach with configurable annotation granularity
towards an affordable brain computer interface for the assessment of programmers’ mental workload
towards an eassessment approach of algorithmic problemsolving skills using planbased program understanding approach
towards an integrated toolset for program understanding
towards anomaly comprehension using structural compression to navigate profiling calltrees
towards automated code parallelization through program comprehension
towards automated testing of blockchainbased decentralized applications
towards automatic evaluation of program understanding degree using eye tracking patterns
towards automatic generation of short summaries of commits
towards automatically generating summary comments for java methods
towards behavioral reflexion models
towards better symbol resolution for c/c++ programs a clusterbased solution
towards building a smarter domain knowledge recovery assistant1
towards classification of loop idioms automatically extracted from legacy systems
towards comparing and combining pointsto analyses
towards conceptaware programming environments for guiding software modularity
towards developing a metamodel for comprehending software adaptability
towards empirical validation of design notations for web applications an experimental framework
towards empirically validated software architecture visualization
towards evidencebased recommendations to guide the evolution of componentbased product families
"towards evidencesupported, questiondirected collaborative program comprehension"
towards experimental evaluation of code obfuscation techniques
towards gamifying software structure comprehension in virtual reality
towards improving introductory computer programming with an its for conceptual learning
towards intelligent search support for web services evolution identifying the right abstractions
towards interactive mining of understandable state machine models from embedded software
towards justintime refactoring recommenders
towards logging optimization for dynamic object process graph construction
towards more accurate content categorization of api discussions
towards open source software system architecture recovery using design metrics
towards prioritizing documentation effort
towards promoting design and uml modeling practices in the open source community
towards spatial complexity measures for comprehension of java programs
towards standard for experiments in program comprehension
towards the extraction of domain concepts from the identifiers
towards tool support for analyzing legacy systems in technical domains
towards trace based model synthesis for program understanding and test automation
towards understandable guards of extracted state machines from embedded software
towards understanding code readability and its impact on design quality
towards understanding programs by counting objects
towards understanding programs through wearbased filtering
towards visual reflexion models
trace construction using enhanced performance monitoring
trace visualization for program comprehension a controlled experiment
traceability between function point and source code
traceability recovery by modeling programmer behavior
traceability recovery in rad software systems
traceguided synthesis of reactive behavior models of programmable logic controllers
tracing objectoriented code into functional requirements
tracing of state machine execution in the modeldriven development framework
tracing requirements to tests with high precision and recall
tracking objects to detect feature dependencies
tralfamadore unifying source code and execution experience
transaction mapping based approach for mining software specifications
transforming haskell for tracing
treematching object concept assignment to support program comprehension
trend analysis on the metadata of program comprehension papers
tris a fast and accurate identifiers splitting and expansion algorithm
"trust in automated software repair the effects of repair source, transparency, and programmer experience on perceived trustworthiness and trust"
trustbased requirements traceability
trustrace improving automated trace retrieval through resource trust analysis
two module factoring techniques
two program comprehension tools for automatic parallelization
two quasiexperiments on cohesion metrics and program comprehension
two user perspectives in program comprehension end users and developer users
type analysis for javascript
type harvesting a practical approach to obtaining typing information in dynamic programming languages
type highlighting a clientdriven visual approach for class hierarchies reengineering
types and concept analysis for legacy systems
typographic style is more than cosmetic
unbreak my build assisting developers with build repair hints
understanding ajax applications by connecting client and serverside execution traces
understanding and auditing the licensing of open source software distributions
understanding and improving the maintenance process a method and two case studies
understanding asynchronous interactions in fullstack javascript
understanding c programs using the combined c graph representation
understanding case generated legacy applications a case study
understanding changeproneness in oo software through visualization
understanding class evolution in objectoriented software
understanding cloned patterns in web applications
understanding cobol systems using inferred types
understanding code architectures via interactive exploration and layout of layered diagrams
understanding collaborative program comprehension interlacing gaze and dialogues
understanding complex multithreaded software systems by using trace visualization
understanding concerns in software insights gained from two case studies
understanding datasensitive code one piece of the year 2000 puzzle
understanding distributed systems via execution trace data
understanding evolutionary coupling by finegrained cochange relationship analysis
understanding execution traces using massive sequence and circular bundle views
understanding features in soa some experiences from distributed systems
understanding function behaviors through program slicing
understanding how the requirements are implemented in source code
understanding javascript eventbased interactions
understanding javascript eventbased interactions with clematis
understanding largescale software a hierarchical view
understanding largescale software – a hierarchical view
understanding lda in source code analysis
understanding log lines using development knowledge
understanding lolita program comprehension in functional languages
understanding misunderstandings in source code
understanding modifications in statebased models
understanding obfuscated code
understanding objectoriented source code from the behavioural perspective
understanding of heterogeneous multistage metaprograms
understanding program slices
understanding program understanding
understanding programmer language
understanding programming expertise an empirical study of phasic brain wave changes
understanding registrationbased abstractions a quantitative user study
understanding software application interfaces via string analysis
understanding software architectures by visualizationan experiment with graphical elements
understanding software systems using reverse engineering technology perspectives from the rigi project
understanding software through numbers a metric based approach to program comprehension
understanding some software quality aspects from architecture and design models
understanding source code differences by separating refactoring effects
understanding source code through projectional editor
understanding the architecture of software systems
understanding the behavior of database operations under program control
understanding the behaviour of hackers while performing attack tasks in a professional setting and in a public challenge
understanding the complexity embedded in large routine call traces with a focus on program comprehension tasks
understanding the database manipulation behavior of programs
understanding the dynamics of information systems
understanding the relevance of microstructures for design patterns detection
understanding the sources of software defects a filtering approach
understanding the use of inheritance with visual patterns
understanding understanding source code with functional magnetic resonance imaging
understanding web applications through dynamic analysis
understanding web applications using component based visual patterns
understanding where requirements are implemented the relationship between requirements traces and method calls in code
understandinginthelarge
unibench a tool for automated and collaborative benchmarking
unifying theories of program comprehension
universal report a generic reverse engineering tool
unsupervised deep bug report summarization
unsupervised software categorization using bytecode
usability challenges that novice programmers experience when using scratch for the first time
use of a genetic algorithm to identify source code metrics which improves cognitive complexity predictive models
use of a program understanding taxonomy at hewlettpackard
usecase driven method of architecture recovery for program understanding and reuse reengineering
user evaluation of a domain specific program comprehension tool
user perspectives on a visual aid to program comprehension
users perception on the use of metricattitude to perform source code comprehension tasks a focus group study
using a behavioral theory of program comprehension in software engineering
using a concept lattice of decomposition slices for program understanding and impact analysis
using abstractiondriven slicing for postmortem analysis of software
using an artificial intelligence approach to build an automated program understanding/fault localization tool
using an integrated toolset for program understanding
using aspect orientation in legacy environments for reverse engineering using dynamic analysisan industrial experience report
using aspect orientation in understanding legacy cobol code
using automatic clustering to produce highlevel system organizations of source code
using background colors to support program comprehension in software product lines
using bayesian belief networks to predict change propagation in software systems
using clustering to support the migration from static to dynamic web pages
using cognitive easiness metric for program comprehension
using concept maps to assist program comprehension and concept location an empirical study
using conceptual roles of data for enhanced program comprehension
using contexts to extract models from code
using data fusion and web mining to support feature location in software
using dataflow information for concern identification in objectoriented software systems
using developer eye movements to externalize the mental model used in code summarization tasks
using development history sticky notes to understand software architecture
using domain knowledge to improve reverse engineering
using domain ontologies in a dynamic analysis for program comprehension
using dynamic information for the iterative recovery of collaborations and roles
using entropy measures for comparison of software traces
using evolutionary annotations from change logs to enhance program comprehension
using eye gaze data to recognize taskrelevant source code better and more finegrained
using eye tracking technology to analyze the impact of stylistic inconsistency on code readability
using feature modeling for program comprehension and software architecture recovery
using foldin and foldout in the architecture recovery of software systems
using frugal user feedback with closeness analysis on code to improve irbased traceability recovery
using fuzzy reasoning to support automated program understanding
using fuzzy rules for identifying key classes in software systems
using graph matching program recognition of the selection sort algorithm
using graph patterns to extract scenarios
using graph rewriting to specify software architectural transformations
using hierarchical latent dirichlet allocation to construct feature tree for program comprehension
using informal and formal techniques for the reverse engineering of c programs
using information retrieval based coupling measures for impact analysis
using information retrieval to support design of incremental change of software
using knowledge representation to understand interactive systems
using latent semantic analysis to identify similarities in source code to support program understanding
using locmd to support software change analysis
using metricbased filtering to improve design pattern detection approaches
using network analysis for recommendation of central software classes
using ontology fragments in concept location
using ontology reasoning for reverse engineering design patterns
"using paths to measure, explain, and enhance program behavior"
using psychophysiological measures to assess task difficulty in software development
using reverse engineering techniques to infer a system use case model
using runtime data for program comprehension
using sex differences to link spatial cognition and program comprehension
using software metrics tools for maintenance decisions a classroom exercise
using sound to understand software architecture
using stereotypes in the automatic generation of natural language summaries for c++ methods
using structural and textual information to capture feature coupling in objectoriented software
using structured queries for source code search
using the conceptual cohesion of classes for fault prediction in objectoriented systems
using the kleinberg algorithm and vector space model for software system clustering
using the new jgrasp canvas of dynamic viewers for program understanding and debugging in java courses
using the web for software annotations
using topic models to support software maintenance
using visualization for architectural localization and extraction
utilizing web search engines for program analysis
variability through the eyes of the programmer
variable granularity for improving precision of impact analysis
variable provenance in software systems
variableprecision reaching definitions analysis
verification of recovered software architectures
verifying the concept of union slices on java programs
"version history, similar report, and structure putting them together for improved bug localization"
verxcombo an interactive data visualization of popular library version combinations
view definitions for languageindependent multipleview program comprehension and editing
view infinity a zoomable interface for featureoriented software development
viewing objectoriented software with metricattitude an empirical evaluation
viewing simple clones from structural clones perspective
virtual but visible software
virtual reality flythrough of program code structures
visiotm a tool for visualizing source code based on topic modeling
visual approach for change impact analysis a controlled experiment
visual attention patterns during program debugging with an ide
visual contract extractor a tool for reverse engineering visual contracts using dynamic analysis
visual depiction of decision statements what is best for programmers and nonprogrammers
visual depiction of decision statements what is best forprogrammers and nonprogrammers
visual exploration of function call graphs for feature location in complex software systems
visual exploration of largescale evolving software
visual information; amplifying and foraging
visual storytelling of development sessions
visual support for incremental abstraction and refinement in ada 95
visual support for understanding product lines
visualising java coupling and fault proneness
visualising java uncertainty
visualization in the context of model driven engineering
visualization of binary componentbased program structure with component functional size
visualization of c++ template metaprograms
visualization of exception handling constructs to support program understanding
visualization of finegrained code change history
visualization of multithreaded behavior to facilitate maintenance of complex software systems
visualization of procedural abstraction
visualization techniques for effective software comprehend
visualization techniques for program comprehension a literature review
visualization techniques for program comprehensiona literature review
visualization tools for understanding a complex code from a real application
visualizing and analyzing the structure of aspectj software under the eclipse platform
visualizing call graphs
visualizing cochange information with the evolution radar
visualizing code bad smells
visualizing dynamic software system information through highlevel models
visualizing interactions in distributed java applications
visualizing interactions in program executions
visualizing memory graphs
visualizing objectoriented software in virtual reality
visualizing patterns in the execution of objectoriented programs
visualizing program dependencies an experimental study
visualizing program slices
visualizing sequences of debugging sessions using swarm debugging
visualizing serverless cloud application logs for program understanding
visualizing software dynamicities with heat maps
visualizing software in virtual reality
visualizing software structure understandability
visualizing software systems as cities
visualizing the behavior of dynamically modifiable code
visualizing the java heap
visualizing the results of field testing
visualizing the runtime behavior of embedded network systems a toolkit for tinyos
visualizing the synchronization of javathreads with uml
"visualizing threads, transactions and tasks"
visualizing timebased weighted coupling using particle swarm optimization to aid program comprehension
visualizing trace of java collection apis by dynamic bytecode instrumentation
visualizing traceability information with itrace
visualizing year 2000 program changes
visually analyzing eye movements on natural language texts and source code snippets
visually analyzing students gaze on c++ code snippets
"vivisection of a nonexecutable, domainspecific language understanding (the usage of) the p3p language"
vizslice visualizing large scale software slices
vpls and novice program comprehension how do different languages compare
vtrevolution interactive programming video tutorial authoring and watching system
wad a feasibility study using the wicked audio debugger
wap does reviewer age affect code review performance
wb4sp a tool to build the word base for specific programs
"web services composition, execution and visualization"
welcome message
welcome message from the chairs
what can programmer questions tell us about frameworks
what design topics do developers discuss
what do novices learn during program comprehension
what do teachers teach in introductory programming
what do we need to know about clones deriving information needs from user goals
what goes on in your brain when you read and understand code
what influences dwell time during source code reading analysis of element type and frequency as factors
what is my program doing program dynamics in programmers terms
what is the foundation of evidence of human factors decisions in language design an empirical study on programming language workshops
what your ide could do once you understand your code
whats a typical commit a characterization of open source software repositories
whats in a name a study of identifiers
whats inside my app understanding feature redundancy in mobile apps
wheres the schema a taxonomy of patterns for software exchange
which programming language should students learn first a comparison of java and python
why johnny cant develop a secure application a usability analysis of java secure socket extension api
why program comprehension is (or is not) affected by surface features
why teach reverse engineering
widget identification and modification for web 2.0 access technologies (wimwat)
women and men different but equal on the impact of identifier style on source code reading
work in progress evolution of code reusing practices during a sequence of three cs courses
work in progress using a visual programming language to bridge the cognitive gap between a novices mental model and program code
working in pairs as a means for design knowledge building an empirical study
working session empirical studies of programminginthelarge how
working session identification of lowerlevel artifacts
working session on interoperable reengineering services
working session program comprehension and migration strategies for web service and serviceoriented architectures
working session program comprehension strategies for web service and serviceoriented architectures
working session textual views of source code to support comprehension
working session tools for program comprehension building a comprehenders workbench
working session tools for program comprehension building a comprehenders workbench [session intro.]
working session using eyetracking to understand program comprehension
workshop on graphical documentation for programmers
workshop on graphical documentation for programmers assessing the efficacy of uml diagrams for program understanding
workshop on program comprehension through dynamic analysis (pcoda 05)
workshop on program comprehension through dynamic analysis (pcoda ‘05)
workshop on program comprehension through dynamic analysis (pcoda07)
workshop on program comprehension through dynamic analysis (pcoda08)
workshop on program comprehension through dynamic analysis (pcoda10)
workshop on standard exchange format (wosef)
yaab (yet another ast browser) using ocl to navigate asts
yesterdays weather guiding early reverse engineering efforts by summarizing the evolution of changes
yinyang concealing the deep embedding of dsls